// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/k8s.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/terraform-provider-devzero/internal/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8SServiceName is the fully-qualified name of the K8SService service.
	K8SServiceName = "api.v1.K8SService"
	// ClusterMutationServiceName is the fully-qualified name of the ClusterMutationService service.
	ClusterMutationServiceName = "api.v1.ClusterMutationService"
	// UtilizationServiceName is the fully-qualified name of the UtilizationService service.
	UtilizationServiceName = "api.v1.UtilizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SServiceGetClustersProcedure is the fully-qualified name of the K8SService's GetClusters RPC.
	K8SServiceGetClustersProcedure = "/api.v1.K8SService/GetClusters"
	// K8SServiceListClustersProcedure is the fully-qualified name of the K8SService's ListClusters RPC.
	K8SServiceListClustersProcedure = "/api.v1.K8SService/ListClusters"
	// K8SServiceGetClusterProcedure is the fully-qualified name of the K8SService's GetCluster RPC.
	K8SServiceGetClusterProcedure = "/api.v1.K8SService/GetCluster"
	// K8SServiceGetClusterMetadataProcedure is the fully-qualified name of the K8SService's
	// GetClusterMetadata RPC.
	K8SServiceGetClusterMetadataProcedure = "/api.v1.K8SService/GetClusterMetadata"
	// K8SServiceGetAllNamespacesProcedure is the fully-qualified name of the K8SService's
	// GetAllNamespaces RPC.
	K8SServiceGetAllNamespacesProcedure = "/api.v1.K8SService/GetAllNamespaces"
	// K8SServiceGetAllWorkloadNamesProcedure is the fully-qualified name of the K8SService's
	// GetAllWorkloadNames RPC.
	K8SServiceGetAllWorkloadNamesProcedure = "/api.v1.K8SService/GetAllWorkloadNames"
	// K8SServiceGetAllWorkloadLabelsProcedure is the fully-qualified name of the K8SService's
	// GetAllWorkloadLabels RPC.
	K8SServiceGetAllWorkloadLabelsProcedure = "/api.v1.K8SService/GetAllWorkloadLabels"
	// K8SServiceGetAllNodeGroupNamesProcedure is the fully-qualified name of the K8SService's
	// GetAllNodeGroupNames RPC.
	K8SServiceGetAllNodeGroupNamesProcedure = "/api.v1.K8SService/GetAllNodeGroupNames"
	// K8SServiceMetadataForWorkloadsProcedure is the fully-qualified name of the K8SService's
	// MetadataForWorkloads RPC.
	K8SServiceMetadataForWorkloadsProcedure = "/api.v1.K8SService/MetadataForWorkloads"
	// K8SServiceGetNodeGroupsProcedure is the fully-qualified name of the K8SService's GetNodeGroups
	// RPC.
	K8SServiceGetNodeGroupsProcedure = "/api.v1.K8SService/GetNodeGroups"
	// K8SServiceGetAllNodeGroupsProcedure is the fully-qualified name of the K8SService's
	// GetAllNodeGroups RPC.
	K8SServiceGetAllNodeGroupsProcedure = "/api.v1.K8SService/GetAllNodeGroups"
	// K8SServiceGetNodeGroupsUtilizationProcedure is the fully-qualified name of the K8SService's
	// GetNodeGroupsUtilization RPC.
	K8SServiceGetNodeGroupsUtilizationProcedure = "/api.v1.K8SService/GetNodeGroupsUtilization"
	// K8SServiceGetNodeGroupProcedure is the fully-qualified name of the K8SService's GetNodeGroup RPC.
	K8SServiceGetNodeGroupProcedure = "/api.v1.K8SService/GetNodeGroup"
	// K8SServiceGetNodeProcedure is the fully-qualified name of the K8SService's GetNode RPC.
	K8SServiceGetNodeProcedure = "/api.v1.K8SService/GetNode"
	// K8SServiceGetWorkloadsProcedure is the fully-qualified name of the K8SService's GetWorkloads RPC.
	K8SServiceGetWorkloadsProcedure = "/api.v1.K8SService/GetWorkloads"
	// K8SServiceGetWorkloadProcedure is the fully-qualified name of the K8SService's GetWorkload RPC.
	K8SServiceGetWorkloadProcedure = "/api.v1.K8SService/GetWorkload"
	// K8SServiceGetForecastWorkloadsProcedure is the fully-qualified name of the K8SService's
	// GetForecastWorkloads RPC.
	K8SServiceGetForecastWorkloadsProcedure = "/api.v1.K8SService/GetForecastWorkloads"
	// K8SServiceGetForecastWorkloadProcedure is the fully-qualified name of the K8SService's
	// GetForecastWorkload RPC.
	K8SServiceGetForecastWorkloadProcedure = "/api.v1.K8SService/GetForecastWorkload"
	// K8SServiceGetResourcesProcedure is the fully-qualified name of the K8SService's GetResources RPC.
	K8SServiceGetResourcesProcedure = "/api.v1.K8SService/GetResources"
	// K8SServiceGetPodsProcedure is the fully-qualified name of the K8SService's GetPods RPC.
	K8SServiceGetPodsProcedure = "/api.v1.K8SService/GetPods"
	// K8SServiceGetLatestOperatorVersionProcedure is the fully-qualified name of the K8SService's
	// GetLatestOperatorVersion RPC.
	K8SServiceGetLatestOperatorVersionProcedure = "/api.v1.K8SService/GetLatestOperatorVersion"
	// K8SServiceGalaxyGetClusterPerspectiveProcedure is the fully-qualified name of the K8SService's
	// GalaxyGetClusterPerspective RPC.
	K8SServiceGalaxyGetClusterPerspectiveProcedure = "/api.v1.K8SService/GalaxyGetClusterPerspective"
	// K8SServiceGalaxyGetNodePerspectiveProcedure is the fully-qualified name of the K8SService's
	// GalaxyGetNodePerspective RPC.
	K8SServiceGalaxyGetNodePerspectiveProcedure = "/api.v1.K8SService/GalaxyGetNodePerspective"
	// K8SServiceGalaxyGetWorkloadPerspectiveProcedure is the fully-qualified name of the K8SService's
	// GalaxyGetWorkloadPerspective RPC.
	K8SServiceGalaxyGetWorkloadPerspectiveProcedure = "/api.v1.K8SService/GalaxyGetWorkloadPerspective"
	// K8SServiceListAuditLogsProcedure is the fully-qualified name of the K8SService's ListAuditLogs
	// RPC.
	K8SServiceListAuditLogsProcedure = "/api.v1.K8SService/ListAuditLogs"
	// K8SServiceListAuditLogOriginatorsProcedure is the fully-qualified name of the K8SService's
	// ListAuditLogOriginators RPC.
	K8SServiceListAuditLogOriginatorsProcedure = "/api.v1.K8SService/ListAuditLogOriginators"
	// K8SServiceSendWorkloadEmailProcedure is the fully-qualified name of the K8SService's
	// SendWorkloadEmail RPC.
	K8SServiceSendWorkloadEmailProcedure = "/api.v1.K8SService/SendWorkloadEmail"
	// K8SServiceSendWeeklySummaryEmailProcedure is the fully-qualified name of the K8SService's
	// SendWeeklySummaryEmail RPC.
	K8SServiceSendWeeklySummaryEmailProcedure = "/api.v1.K8SService/SendWeeklySummaryEmail"
	// K8SServiceGetClustersNodeInfoProcedure is the fully-qualified name of the K8SService's
	// GetClustersNodeInfo RPC.
	K8SServiceGetClustersNodeInfoProcedure = "/api.v1.K8SService/GetClustersNodeInfo"
	// ClusterMutationServiceCreateClusterProcedure is the fully-qualified name of the
	// ClusterMutationService's CreateCluster RPC.
	ClusterMutationServiceCreateClusterProcedure = "/api.v1.ClusterMutationService/CreateCluster"
	// ClusterMutationServiceDeleteClusterProcedure is the fully-qualified name of the
	// ClusterMutationService's DeleteCluster RPC.
	ClusterMutationServiceDeleteClusterProcedure = "/api.v1.ClusterMutationService/DeleteCluster"
	// ClusterMutationServiceUpdateClusterProcedure is the fully-qualified name of the
	// ClusterMutationService's UpdateCluster RPC.
	ClusterMutationServiceUpdateClusterProcedure = "/api.v1.ClusterMutationService/UpdateCluster"
	// ClusterMutationServiceResetClusterTokenProcedure is the fully-qualified name of the
	// ClusterMutationService's ResetClusterToken RPC.
	ClusterMutationServiceResetClusterTokenProcedure = "/api.v1.ClusterMutationService/ResetClusterToken"
	// UtilizationServiceDailyUtilizationProcedure is the fully-qualified name of the
	// UtilizationService's DailyUtilization RPC.
	UtilizationServiceDailyUtilizationProcedure = "/api.v1.UtilizationService/DailyUtilization"
	// UtilizationServiceDailyUtilizationInstanceTypeProcedure is the fully-qualified name of the
	// UtilizationService's DailyUtilizationInstanceType RPC.
	UtilizationServiceDailyUtilizationInstanceTypeProcedure = "/api.v1.UtilizationService/DailyUtilizationInstanceType"
	// UtilizationServiceDailyUtilizationNodeTypeProcedure is the fully-qualified name of the
	// UtilizationService's DailyUtilizationNodeType RPC.
	UtilizationServiceDailyUtilizationNodeTypeProcedure = "/api.v1.UtilizationService/DailyUtilizationNodeType"
)

// K8SServiceClient is a client for the api.v1.K8SService service.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// ListClusters retrieves clusters for a team with pagination.
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetClusterMetadata retrieves metadata information for clusters in a team.
	GetClusterMetadata(context.Context, *connect.Request[v1.GetClusterMetadataRequest]) (*connect.Response[v1.GetClusterMetadataResponse], error)
	// GetAllNamespaces returns a list of all namespaces for a teamID; if cluster list is empty, returns all.
	GetAllNamespaces(context.Context, *connect.Request[v1.GetAllNamespacesRequest]) (*connect.Response[v1.GetAllNamespacesResponse], error)
	// GetAllWorkloadNames returns a list of all workload names for a team ID; if cluster list is empty, returns all.
	GetAllWorkloadNames(context.Context, *connect.Request[v1.GetAllWorkloadNamesRequest]) (*connect.Response[v1.GetAllWorkloadNamesResponse], error)
	// GetAllWorkloadLabels returns all workload labels for a team ID; if cluster list is empty, returns all.
	GetAllWorkloadLabels(context.Context, *connect.Request[v1.GetAllWorkloadLabelsRequest]) (*connect.Response[v1.GetAllWorkloadLabelsResponse], error)
	// GetAllNodeGroupNames retrieves list of node group names by cluster
	GetAllNodeGroupNames(context.Context, *connect.Request[v1.GetAllNodeGroupNamesRequest]) (*connect.Response[v1.GetAllNodeGroupNamesResponse], error)
	MetadataForWorkloads(context.Context, *connect.Request[v1.MetadataForWorkloadsRequest]) (*connect.Response[v1.MetadataForWorkloadsResponse], error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetAllNodeGroups retrieves all node groups for all clusters in a team.
	GetAllNodeGroups(context.Context, *connect.Request[v1.GetAllNodeGroupsRequest]) (*connect.Response[v1.GetAllNodeGroupsResponse], error)
	// GetNodeGroupsUtilization retrieves utilization data for node groups in a specific cluster.
	GetNodeGroupsUtilization(context.Context, *connect.Request[v1.GetNodeGroupsUtilizationRequest]) (*connect.Response[v1.GetNodeGroupsUtilizationResponse], error)
	// GetNodeGroup retrieves node group for a specific cluster.
	GetNodeGroup(context.Context, *connect.Request[v1.GetNodeGroupRequest]) (*connect.Response[v1.GetNodeGroupResponse], error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error)
	// GetForecastWorkloads retrieves all workloads for a specific cluster.
	GetForecastWorkloads(context.Context, *connect.Request[v1.GetForecastWorkloadsRequest]) (*connect.Response[v1.GetForecastWorkloadsResponse], error)
	// GetForecastWorkload retrieves detailed information for a specific workload.
	GetForecastWorkload(context.Context, *connect.Request[v1.GetForecastWorkloadRequest]) (*connect.Response[v1.GetForecastWorkloadResponse], error)
	// GetResources retrivers specific resource and their details from db, simulating informer.
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
	// GetPods retrieves Pod resources and their details from db.
	GetPods(context.Context, *connect.Request[v1.GetPodsRequest]) (*connect.Response[v1.GetPodsResponse], error)
	GetLatestOperatorVersion(context.Context, *connect.Request[v1.GetLatestOperatorVersionRequest]) (*connect.Response[v1.GetLatestOperatorVersionResponse], error)
	GalaxyGetClusterPerspective(context.Context, *connect.Request[v1.GalaxyGetClusterPerspectiveRequest]) (*connect.Response[v1.GalaxyGetClusterPerspectiveResponse], error)
	GalaxyGetNodePerspective(context.Context, *connect.Request[v1.GalaxyGetNodePerspectiveRequest]) (*connect.Response[v1.GalaxyGetNodePerspectiveResponse], error)
	GalaxyGetWorkloadPerspective(context.Context, *connect.Request[v1.GalaxyGetWorkloadPerspectiveRequest]) (*connect.Response[v1.GalaxyGetWorkloadPerspectiveResponse], error)
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
	ListAuditLogOriginators(context.Context, *connect.Request[v1.ListAuditLogOriginatorsRequest]) (*connect.Response[v1.ListAuditLogOriginatorsResponse], error)
	SendWorkloadEmail(context.Context, *connect.Request[v1.SendWorkloadEmailRequest]) (*connect.Response[v1.SendWorkloadEmailResponse], error)
	SendWeeklySummaryEmail(context.Context, *connect.Request[v1.SendWeeklySummaryEmailRequest]) (*connect.Response[v1.SendWeeklySummaryEmailResponse], error)
	GetClustersNodeInfo(context.Context, *connect.Request[v1.GetClustersNodeInfoRequest]) (*connect.Response[v1.GetClustersNodeInfoResponse], error)
}

// NewK8SServiceClient constructs a client for the api.v1.K8SService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SServiceClient{
		getClusters: connect.NewClient[v1.GetClustersRequest, v1.GetClustersResponse](
			httpClient,
			baseURL+K8SServiceGetClustersProcedure,
			opts...,
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+K8SServiceListClustersProcedure,
			opts...,
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+K8SServiceGetClusterProcedure,
			opts...,
		),
		getClusterMetadata: connect.NewClient[v1.GetClusterMetadataRequest, v1.GetClusterMetadataResponse](
			httpClient,
			baseURL+K8SServiceGetClusterMetadataProcedure,
			opts...,
		),
		getAllNamespaces: connect.NewClient[v1.GetAllNamespacesRequest, v1.GetAllNamespacesResponse](
			httpClient,
			baseURL+K8SServiceGetAllNamespacesProcedure,
			opts...,
		),
		getAllWorkloadNames: connect.NewClient[v1.GetAllWorkloadNamesRequest, v1.GetAllWorkloadNamesResponse](
			httpClient,
			baseURL+K8SServiceGetAllWorkloadNamesProcedure,
			opts...,
		),
		getAllWorkloadLabels: connect.NewClient[v1.GetAllWorkloadLabelsRequest, v1.GetAllWorkloadLabelsResponse](
			httpClient,
			baseURL+K8SServiceGetAllWorkloadLabelsProcedure,
			opts...,
		),
		getAllNodeGroupNames: connect.NewClient[v1.GetAllNodeGroupNamesRequest, v1.GetAllNodeGroupNamesResponse](
			httpClient,
			baseURL+K8SServiceGetAllNodeGroupNamesProcedure,
			opts...,
		),
		metadataForWorkloads: connect.NewClient[v1.MetadataForWorkloadsRequest, v1.MetadataForWorkloadsResponse](
			httpClient,
			baseURL+K8SServiceMetadataForWorkloadsProcedure,
			opts...,
		),
		getNodeGroups: connect.NewClient[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupsProcedure,
			opts...,
		),
		getAllNodeGroups: connect.NewClient[v1.GetAllNodeGroupsRequest, v1.GetAllNodeGroupsResponse](
			httpClient,
			baseURL+K8SServiceGetAllNodeGroupsProcedure,
			opts...,
		),
		getNodeGroupsUtilization: connect.NewClient[v1.GetNodeGroupsUtilizationRequest, v1.GetNodeGroupsUtilizationResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupsUtilizationProcedure,
			opts...,
		),
		getNodeGroup: connect.NewClient[v1.GetNodeGroupRequest, v1.GetNodeGroupResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupProcedure,
			opts...,
		),
		getNode: connect.NewClient[v1.GetNodeRequest, v1.GetNodeResponse](
			httpClient,
			baseURL+K8SServiceGetNodeProcedure,
			opts...,
		),
		getWorkloads: connect.NewClient[v1.GetWorkloadsRequest, v1.GetWorkloadsResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadsProcedure,
			opts...,
		),
		getWorkload: connect.NewClient[v1.GetWorkloadRequest, v1.GetWorkloadResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadProcedure,
			opts...,
		),
		getForecastWorkloads: connect.NewClient[v1.GetForecastWorkloadsRequest, v1.GetForecastWorkloadsResponse](
			httpClient,
			baseURL+K8SServiceGetForecastWorkloadsProcedure,
			opts...,
		),
		getForecastWorkload: connect.NewClient[v1.GetForecastWorkloadRequest, v1.GetForecastWorkloadResponse](
			httpClient,
			baseURL+K8SServiceGetForecastWorkloadProcedure,
			opts...,
		),
		getResources: connect.NewClient[v1.GetResourcesRequest, v1.GetResourcesResponse](
			httpClient,
			baseURL+K8SServiceGetResourcesProcedure,
			opts...,
		),
		getPods: connect.NewClient[v1.GetPodsRequest, v1.GetPodsResponse](
			httpClient,
			baseURL+K8SServiceGetPodsProcedure,
			opts...,
		),
		getLatestOperatorVersion: connect.NewClient[v1.GetLatestOperatorVersionRequest, v1.GetLatestOperatorVersionResponse](
			httpClient,
			baseURL+K8SServiceGetLatestOperatorVersionProcedure,
			opts...,
		),
		galaxyGetClusterPerspective: connect.NewClient[v1.GalaxyGetClusterPerspectiveRequest, v1.GalaxyGetClusterPerspectiveResponse](
			httpClient,
			baseURL+K8SServiceGalaxyGetClusterPerspectiveProcedure,
			opts...,
		),
		galaxyGetNodePerspective: connect.NewClient[v1.GalaxyGetNodePerspectiveRequest, v1.GalaxyGetNodePerspectiveResponse](
			httpClient,
			baseURL+K8SServiceGalaxyGetNodePerspectiveProcedure,
			opts...,
		),
		galaxyGetWorkloadPerspective: connect.NewClient[v1.GalaxyGetWorkloadPerspectiveRequest, v1.GalaxyGetWorkloadPerspectiveResponse](
			httpClient,
			baseURL+K8SServiceGalaxyGetWorkloadPerspectiveProcedure,
			opts...,
		),
		listAuditLogs: connect.NewClient[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse](
			httpClient,
			baseURL+K8SServiceListAuditLogsProcedure,
			opts...,
		),
		listAuditLogOriginators: connect.NewClient[v1.ListAuditLogOriginatorsRequest, v1.ListAuditLogOriginatorsResponse](
			httpClient,
			baseURL+K8SServiceListAuditLogOriginatorsProcedure,
			opts...,
		),
		sendWorkloadEmail: connect.NewClient[v1.SendWorkloadEmailRequest, v1.SendWorkloadEmailResponse](
			httpClient,
			baseURL+K8SServiceSendWorkloadEmailProcedure,
			opts...,
		),
		sendWeeklySummaryEmail: connect.NewClient[v1.SendWeeklySummaryEmailRequest, v1.SendWeeklySummaryEmailResponse](
			httpClient,
			baseURL+K8SServiceSendWeeklySummaryEmailProcedure,
			opts...,
		),
		getClustersNodeInfo: connect.NewClient[v1.GetClustersNodeInfoRequest, v1.GetClustersNodeInfoResponse](
			httpClient,
			baseURL+K8SServiceGetClustersNodeInfoProcedure,
			opts...,
		),
	}
}

// k8SServiceClient implements K8SServiceClient.
type k8SServiceClient struct {
	getClusters                  *connect.Client[v1.GetClustersRequest, v1.GetClustersResponse]
	listClusters                 *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	getCluster                   *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	getClusterMetadata           *connect.Client[v1.GetClusterMetadataRequest, v1.GetClusterMetadataResponse]
	getAllNamespaces             *connect.Client[v1.GetAllNamespacesRequest, v1.GetAllNamespacesResponse]
	getAllWorkloadNames          *connect.Client[v1.GetAllWorkloadNamesRequest, v1.GetAllWorkloadNamesResponse]
	getAllWorkloadLabels         *connect.Client[v1.GetAllWorkloadLabelsRequest, v1.GetAllWorkloadLabelsResponse]
	getAllNodeGroupNames         *connect.Client[v1.GetAllNodeGroupNamesRequest, v1.GetAllNodeGroupNamesResponse]
	metadataForWorkloads         *connect.Client[v1.MetadataForWorkloadsRequest, v1.MetadataForWorkloadsResponse]
	getNodeGroups                *connect.Client[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse]
	getAllNodeGroups             *connect.Client[v1.GetAllNodeGroupsRequest, v1.GetAllNodeGroupsResponse]
	getNodeGroupsUtilization     *connect.Client[v1.GetNodeGroupsUtilizationRequest, v1.GetNodeGroupsUtilizationResponse]
	getNodeGroup                 *connect.Client[v1.GetNodeGroupRequest, v1.GetNodeGroupResponse]
	getNode                      *connect.Client[v1.GetNodeRequest, v1.GetNodeResponse]
	getWorkloads                 *connect.Client[v1.GetWorkloadsRequest, v1.GetWorkloadsResponse]
	getWorkload                  *connect.Client[v1.GetWorkloadRequest, v1.GetWorkloadResponse]
	getForecastWorkloads         *connect.Client[v1.GetForecastWorkloadsRequest, v1.GetForecastWorkloadsResponse]
	getForecastWorkload          *connect.Client[v1.GetForecastWorkloadRequest, v1.GetForecastWorkloadResponse]
	getResources                 *connect.Client[v1.GetResourcesRequest, v1.GetResourcesResponse]
	getPods                      *connect.Client[v1.GetPodsRequest, v1.GetPodsResponse]
	getLatestOperatorVersion     *connect.Client[v1.GetLatestOperatorVersionRequest, v1.GetLatestOperatorVersionResponse]
	galaxyGetClusterPerspective  *connect.Client[v1.GalaxyGetClusterPerspectiveRequest, v1.GalaxyGetClusterPerspectiveResponse]
	galaxyGetNodePerspective     *connect.Client[v1.GalaxyGetNodePerspectiveRequest, v1.GalaxyGetNodePerspectiveResponse]
	galaxyGetWorkloadPerspective *connect.Client[v1.GalaxyGetWorkloadPerspectiveRequest, v1.GalaxyGetWorkloadPerspectiveResponse]
	listAuditLogs                *connect.Client[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse]
	listAuditLogOriginators      *connect.Client[v1.ListAuditLogOriginatorsRequest, v1.ListAuditLogOriginatorsResponse]
	sendWorkloadEmail            *connect.Client[v1.SendWorkloadEmailRequest, v1.SendWorkloadEmailResponse]
	sendWeeklySummaryEmail       *connect.Client[v1.SendWeeklySummaryEmailRequest, v1.SendWeeklySummaryEmailResponse]
	getClustersNodeInfo          *connect.Client[v1.GetClustersNodeInfoRequest, v1.GetClustersNodeInfoResponse]
}

// GetClusters calls api.v1.K8SService.GetClusters.
func (c *k8SServiceClient) GetClusters(ctx context.Context, req *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// ListClusters calls api.v1.K8SService.ListClusters.
func (c *k8SServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// GetCluster calls api.v1.K8SService.GetCluster.
func (c *k8SServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// GetClusterMetadata calls api.v1.K8SService.GetClusterMetadata.
func (c *k8SServiceClient) GetClusterMetadata(ctx context.Context, req *connect.Request[v1.GetClusterMetadataRequest]) (*connect.Response[v1.GetClusterMetadataResponse], error) {
	return c.getClusterMetadata.CallUnary(ctx, req)
}

// GetAllNamespaces calls api.v1.K8SService.GetAllNamespaces.
func (c *k8SServiceClient) GetAllNamespaces(ctx context.Context, req *connect.Request[v1.GetAllNamespacesRequest]) (*connect.Response[v1.GetAllNamespacesResponse], error) {
	return c.getAllNamespaces.CallUnary(ctx, req)
}

// GetAllWorkloadNames calls api.v1.K8SService.GetAllWorkloadNames.
func (c *k8SServiceClient) GetAllWorkloadNames(ctx context.Context, req *connect.Request[v1.GetAllWorkloadNamesRequest]) (*connect.Response[v1.GetAllWorkloadNamesResponse], error) {
	return c.getAllWorkloadNames.CallUnary(ctx, req)
}

// GetAllWorkloadLabels calls api.v1.K8SService.GetAllWorkloadLabels.
func (c *k8SServiceClient) GetAllWorkloadLabels(ctx context.Context, req *connect.Request[v1.GetAllWorkloadLabelsRequest]) (*connect.Response[v1.GetAllWorkloadLabelsResponse], error) {
	return c.getAllWorkloadLabels.CallUnary(ctx, req)
}

// GetAllNodeGroupNames calls api.v1.K8SService.GetAllNodeGroupNames.
func (c *k8SServiceClient) GetAllNodeGroupNames(ctx context.Context, req *connect.Request[v1.GetAllNodeGroupNamesRequest]) (*connect.Response[v1.GetAllNodeGroupNamesResponse], error) {
	return c.getAllNodeGroupNames.CallUnary(ctx, req)
}

// MetadataForWorkloads calls api.v1.K8SService.MetadataForWorkloads.
func (c *k8SServiceClient) MetadataForWorkloads(ctx context.Context, req *connect.Request[v1.MetadataForWorkloadsRequest]) (*connect.Response[v1.MetadataForWorkloadsResponse], error) {
	return c.metadataForWorkloads.CallUnary(ctx, req)
}

// GetNodeGroups calls api.v1.K8SService.GetNodeGroups.
func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, req *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return c.getNodeGroups.CallUnary(ctx, req)
}

// GetAllNodeGroups calls api.v1.K8SService.GetAllNodeGroups.
func (c *k8SServiceClient) GetAllNodeGroups(ctx context.Context, req *connect.Request[v1.GetAllNodeGroupsRequest]) (*connect.Response[v1.GetAllNodeGroupsResponse], error) {
	return c.getAllNodeGroups.CallUnary(ctx, req)
}

// GetNodeGroupsUtilization calls api.v1.K8SService.GetNodeGroupsUtilization.
func (c *k8SServiceClient) GetNodeGroupsUtilization(ctx context.Context, req *connect.Request[v1.GetNodeGroupsUtilizationRequest]) (*connect.Response[v1.GetNodeGroupsUtilizationResponse], error) {
	return c.getNodeGroupsUtilization.CallUnary(ctx, req)
}

// GetNodeGroup calls api.v1.K8SService.GetNodeGroup.
func (c *k8SServiceClient) GetNodeGroup(ctx context.Context, req *connect.Request[v1.GetNodeGroupRequest]) (*connect.Response[v1.GetNodeGroupResponse], error) {
	return c.getNodeGroup.CallUnary(ctx, req)
}

// GetNode calls api.v1.K8SService.GetNode.
func (c *k8SServiceClient) GetNode(ctx context.Context, req *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return c.getNode.CallUnary(ctx, req)
}

// GetWorkloads calls api.v1.K8SService.GetWorkloads.
func (c *k8SServiceClient) GetWorkloads(ctx context.Context, req *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error) {
	return c.getWorkloads.CallUnary(ctx, req)
}

// GetWorkload calls api.v1.K8SService.GetWorkload.
func (c *k8SServiceClient) GetWorkload(ctx context.Context, req *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error) {
	return c.getWorkload.CallUnary(ctx, req)
}

// GetForecastWorkloads calls api.v1.K8SService.GetForecastWorkloads.
func (c *k8SServiceClient) GetForecastWorkloads(ctx context.Context, req *connect.Request[v1.GetForecastWorkloadsRequest]) (*connect.Response[v1.GetForecastWorkloadsResponse], error) {
	return c.getForecastWorkloads.CallUnary(ctx, req)
}

// GetForecastWorkload calls api.v1.K8SService.GetForecastWorkload.
func (c *k8SServiceClient) GetForecastWorkload(ctx context.Context, req *connect.Request[v1.GetForecastWorkloadRequest]) (*connect.Response[v1.GetForecastWorkloadResponse], error) {
	return c.getForecastWorkload.CallUnary(ctx, req)
}

// GetResources calls api.v1.K8SService.GetResources.
func (c *k8SServiceClient) GetResources(ctx context.Context, req *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return c.getResources.CallUnary(ctx, req)
}

// GetPods calls api.v1.K8SService.GetPods.
func (c *k8SServiceClient) GetPods(ctx context.Context, req *connect.Request[v1.GetPodsRequest]) (*connect.Response[v1.GetPodsResponse], error) {
	return c.getPods.CallUnary(ctx, req)
}

// GetLatestOperatorVersion calls api.v1.K8SService.GetLatestOperatorVersion.
func (c *k8SServiceClient) GetLatestOperatorVersion(ctx context.Context, req *connect.Request[v1.GetLatestOperatorVersionRequest]) (*connect.Response[v1.GetLatestOperatorVersionResponse], error) {
	return c.getLatestOperatorVersion.CallUnary(ctx, req)
}

// GalaxyGetClusterPerspective calls api.v1.K8SService.GalaxyGetClusterPerspective.
func (c *k8SServiceClient) GalaxyGetClusterPerspective(ctx context.Context, req *connect.Request[v1.GalaxyGetClusterPerspectiveRequest]) (*connect.Response[v1.GalaxyGetClusterPerspectiveResponse], error) {
	return c.galaxyGetClusterPerspective.CallUnary(ctx, req)
}

// GalaxyGetNodePerspective calls api.v1.K8SService.GalaxyGetNodePerspective.
func (c *k8SServiceClient) GalaxyGetNodePerspective(ctx context.Context, req *connect.Request[v1.GalaxyGetNodePerspectiveRequest]) (*connect.Response[v1.GalaxyGetNodePerspectiveResponse], error) {
	return c.galaxyGetNodePerspective.CallUnary(ctx, req)
}

// GalaxyGetWorkloadPerspective calls api.v1.K8SService.GalaxyGetWorkloadPerspective.
func (c *k8SServiceClient) GalaxyGetWorkloadPerspective(ctx context.Context, req *connect.Request[v1.GalaxyGetWorkloadPerspectiveRequest]) (*connect.Response[v1.GalaxyGetWorkloadPerspectiveResponse], error) {
	return c.galaxyGetWorkloadPerspective.CallUnary(ctx, req)
}

// ListAuditLogs calls api.v1.K8SService.ListAuditLogs.
func (c *k8SServiceClient) ListAuditLogs(ctx context.Context, req *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return c.listAuditLogs.CallUnary(ctx, req)
}

// ListAuditLogOriginators calls api.v1.K8SService.ListAuditLogOriginators.
func (c *k8SServiceClient) ListAuditLogOriginators(ctx context.Context, req *connect.Request[v1.ListAuditLogOriginatorsRequest]) (*connect.Response[v1.ListAuditLogOriginatorsResponse], error) {
	return c.listAuditLogOriginators.CallUnary(ctx, req)
}

// SendWorkloadEmail calls api.v1.K8SService.SendWorkloadEmail.
func (c *k8SServiceClient) SendWorkloadEmail(ctx context.Context, req *connect.Request[v1.SendWorkloadEmailRequest]) (*connect.Response[v1.SendWorkloadEmailResponse], error) {
	return c.sendWorkloadEmail.CallUnary(ctx, req)
}

// SendWeeklySummaryEmail calls api.v1.K8SService.SendWeeklySummaryEmail.
func (c *k8SServiceClient) SendWeeklySummaryEmail(ctx context.Context, req *connect.Request[v1.SendWeeklySummaryEmailRequest]) (*connect.Response[v1.SendWeeklySummaryEmailResponse], error) {
	return c.sendWeeklySummaryEmail.CallUnary(ctx, req)
}

// GetClustersNodeInfo calls api.v1.K8SService.GetClustersNodeInfo.
func (c *k8SServiceClient) GetClustersNodeInfo(ctx context.Context, req *connect.Request[v1.GetClustersNodeInfoRequest]) (*connect.Response[v1.GetClustersNodeInfoResponse], error) {
	return c.getClustersNodeInfo.CallUnary(ctx, req)
}

// K8SServiceHandler is an implementation of the api.v1.K8SService service.
type K8SServiceHandler interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// ListClusters retrieves clusters for a team with pagination.
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetClusterMetadata retrieves metadata information for clusters in a team.
	GetClusterMetadata(context.Context, *connect.Request[v1.GetClusterMetadataRequest]) (*connect.Response[v1.GetClusterMetadataResponse], error)
	// GetAllNamespaces returns a list of all namespaces for a teamID; if cluster list is empty, returns all.
	GetAllNamespaces(context.Context, *connect.Request[v1.GetAllNamespacesRequest]) (*connect.Response[v1.GetAllNamespacesResponse], error)
	// GetAllWorkloadNames returns a list of all workload names for a team ID; if cluster list is empty, returns all.
	GetAllWorkloadNames(context.Context, *connect.Request[v1.GetAllWorkloadNamesRequest]) (*connect.Response[v1.GetAllWorkloadNamesResponse], error)
	// GetAllWorkloadLabels returns all workload labels for a team ID; if cluster list is empty, returns all.
	GetAllWorkloadLabels(context.Context, *connect.Request[v1.GetAllWorkloadLabelsRequest]) (*connect.Response[v1.GetAllWorkloadLabelsResponse], error)
	// GetAllNodeGroupNames retrieves list of node group names by cluster
	GetAllNodeGroupNames(context.Context, *connect.Request[v1.GetAllNodeGroupNamesRequest]) (*connect.Response[v1.GetAllNodeGroupNamesResponse], error)
	MetadataForWorkloads(context.Context, *connect.Request[v1.MetadataForWorkloadsRequest]) (*connect.Response[v1.MetadataForWorkloadsResponse], error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetAllNodeGroups retrieves all node groups for all clusters in a team.
	GetAllNodeGroups(context.Context, *connect.Request[v1.GetAllNodeGroupsRequest]) (*connect.Response[v1.GetAllNodeGroupsResponse], error)
	// GetNodeGroupsUtilization retrieves utilization data for node groups in a specific cluster.
	GetNodeGroupsUtilization(context.Context, *connect.Request[v1.GetNodeGroupsUtilizationRequest]) (*connect.Response[v1.GetNodeGroupsUtilizationResponse], error)
	// GetNodeGroup retrieves node group for a specific cluster.
	GetNodeGroup(context.Context, *connect.Request[v1.GetNodeGroupRequest]) (*connect.Response[v1.GetNodeGroupResponse], error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error)
	// GetForecastWorkloads retrieves all workloads for a specific cluster.
	GetForecastWorkloads(context.Context, *connect.Request[v1.GetForecastWorkloadsRequest]) (*connect.Response[v1.GetForecastWorkloadsResponse], error)
	// GetForecastWorkload retrieves detailed information for a specific workload.
	GetForecastWorkload(context.Context, *connect.Request[v1.GetForecastWorkloadRequest]) (*connect.Response[v1.GetForecastWorkloadResponse], error)
	// GetResources retrivers specific resource and their details from db, simulating informer.
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
	// GetPods retrieves Pod resources and their details from db.
	GetPods(context.Context, *connect.Request[v1.GetPodsRequest]) (*connect.Response[v1.GetPodsResponse], error)
	GetLatestOperatorVersion(context.Context, *connect.Request[v1.GetLatestOperatorVersionRequest]) (*connect.Response[v1.GetLatestOperatorVersionResponse], error)
	GalaxyGetClusterPerspective(context.Context, *connect.Request[v1.GalaxyGetClusterPerspectiveRequest]) (*connect.Response[v1.GalaxyGetClusterPerspectiveResponse], error)
	GalaxyGetNodePerspective(context.Context, *connect.Request[v1.GalaxyGetNodePerspectiveRequest]) (*connect.Response[v1.GalaxyGetNodePerspectiveResponse], error)
	GalaxyGetWorkloadPerspective(context.Context, *connect.Request[v1.GalaxyGetWorkloadPerspectiveRequest]) (*connect.Response[v1.GalaxyGetWorkloadPerspectiveResponse], error)
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
	ListAuditLogOriginators(context.Context, *connect.Request[v1.ListAuditLogOriginatorsRequest]) (*connect.Response[v1.ListAuditLogOriginatorsResponse], error)
	SendWorkloadEmail(context.Context, *connect.Request[v1.SendWorkloadEmailRequest]) (*connect.Response[v1.SendWorkloadEmailResponse], error)
	SendWeeklySummaryEmail(context.Context, *connect.Request[v1.SendWeeklySummaryEmailRequest]) (*connect.Response[v1.SendWeeklySummaryEmailResponse], error)
	GetClustersNodeInfo(context.Context, *connect.Request[v1.GetClustersNodeInfoRequest]) (*connect.Response[v1.GetClustersNodeInfoResponse], error)
}

// NewK8SServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SServiceHandler(svc K8SServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SServiceGetClustersHandler := connect.NewUnaryHandler(
		K8SServiceGetClustersProcedure,
		svc.GetClusters,
		opts...,
	)
	k8SServiceListClustersHandler := connect.NewUnaryHandler(
		K8SServiceListClustersProcedure,
		svc.ListClusters,
		opts...,
	)
	k8SServiceGetClusterHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterProcedure,
		svc.GetCluster,
		opts...,
	)
	k8SServiceGetClusterMetadataHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterMetadataProcedure,
		svc.GetClusterMetadata,
		opts...,
	)
	k8SServiceGetAllNamespacesHandler := connect.NewUnaryHandler(
		K8SServiceGetAllNamespacesProcedure,
		svc.GetAllNamespaces,
		opts...,
	)
	k8SServiceGetAllWorkloadNamesHandler := connect.NewUnaryHandler(
		K8SServiceGetAllWorkloadNamesProcedure,
		svc.GetAllWorkloadNames,
		opts...,
	)
	k8SServiceGetAllWorkloadLabelsHandler := connect.NewUnaryHandler(
		K8SServiceGetAllWorkloadLabelsProcedure,
		svc.GetAllWorkloadLabels,
		opts...,
	)
	k8SServiceGetAllNodeGroupNamesHandler := connect.NewUnaryHandler(
		K8SServiceGetAllNodeGroupNamesProcedure,
		svc.GetAllNodeGroupNames,
		opts...,
	)
	k8SServiceMetadataForWorkloadsHandler := connect.NewUnaryHandler(
		K8SServiceMetadataForWorkloadsProcedure,
		svc.MetadataForWorkloads,
		opts...,
	)
	k8SServiceGetNodeGroupsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupsProcedure,
		svc.GetNodeGroups,
		opts...,
	)
	k8SServiceGetAllNodeGroupsHandler := connect.NewUnaryHandler(
		K8SServiceGetAllNodeGroupsProcedure,
		svc.GetAllNodeGroups,
		opts...,
	)
	k8SServiceGetNodeGroupsUtilizationHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupsUtilizationProcedure,
		svc.GetNodeGroupsUtilization,
		opts...,
	)
	k8SServiceGetNodeGroupHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupProcedure,
		svc.GetNodeGroup,
		opts...,
	)
	k8SServiceGetNodeHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeProcedure,
		svc.GetNode,
		opts...,
	)
	k8SServiceGetWorkloadsHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadsProcedure,
		svc.GetWorkloads,
		opts...,
	)
	k8SServiceGetWorkloadHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadProcedure,
		svc.GetWorkload,
		opts...,
	)
	k8SServiceGetForecastWorkloadsHandler := connect.NewUnaryHandler(
		K8SServiceGetForecastWorkloadsProcedure,
		svc.GetForecastWorkloads,
		opts...,
	)
	k8SServiceGetForecastWorkloadHandler := connect.NewUnaryHandler(
		K8SServiceGetForecastWorkloadProcedure,
		svc.GetForecastWorkload,
		opts...,
	)
	k8SServiceGetResourcesHandler := connect.NewUnaryHandler(
		K8SServiceGetResourcesProcedure,
		svc.GetResources,
		opts...,
	)
	k8SServiceGetPodsHandler := connect.NewUnaryHandler(
		K8SServiceGetPodsProcedure,
		svc.GetPods,
		opts...,
	)
	k8SServiceGetLatestOperatorVersionHandler := connect.NewUnaryHandler(
		K8SServiceGetLatestOperatorVersionProcedure,
		svc.GetLatestOperatorVersion,
		opts...,
	)
	k8SServiceGalaxyGetClusterPerspectiveHandler := connect.NewUnaryHandler(
		K8SServiceGalaxyGetClusterPerspectiveProcedure,
		svc.GalaxyGetClusterPerspective,
		opts...,
	)
	k8SServiceGalaxyGetNodePerspectiveHandler := connect.NewUnaryHandler(
		K8SServiceGalaxyGetNodePerspectiveProcedure,
		svc.GalaxyGetNodePerspective,
		opts...,
	)
	k8SServiceGalaxyGetWorkloadPerspectiveHandler := connect.NewUnaryHandler(
		K8SServiceGalaxyGetWorkloadPerspectiveProcedure,
		svc.GalaxyGetWorkloadPerspective,
		opts...,
	)
	k8SServiceListAuditLogsHandler := connect.NewUnaryHandler(
		K8SServiceListAuditLogsProcedure,
		svc.ListAuditLogs,
		opts...,
	)
	k8SServiceListAuditLogOriginatorsHandler := connect.NewUnaryHandler(
		K8SServiceListAuditLogOriginatorsProcedure,
		svc.ListAuditLogOriginators,
		opts...,
	)
	k8SServiceSendWorkloadEmailHandler := connect.NewUnaryHandler(
		K8SServiceSendWorkloadEmailProcedure,
		svc.SendWorkloadEmail,
		opts...,
	)
	k8SServiceSendWeeklySummaryEmailHandler := connect.NewUnaryHandler(
		K8SServiceSendWeeklySummaryEmailProcedure,
		svc.SendWeeklySummaryEmail,
		opts...,
	)
	k8SServiceGetClustersNodeInfoHandler := connect.NewUnaryHandler(
		K8SServiceGetClustersNodeInfoProcedure,
		svc.GetClustersNodeInfo,
		opts...,
	)
	return "/api.v1.K8SService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SServiceGetClustersProcedure:
			k8SServiceGetClustersHandler.ServeHTTP(w, r)
		case K8SServiceListClustersProcedure:
			k8SServiceListClustersHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterProcedure:
			k8SServiceGetClusterHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterMetadataProcedure:
			k8SServiceGetClusterMetadataHandler.ServeHTTP(w, r)
		case K8SServiceGetAllNamespacesProcedure:
			k8SServiceGetAllNamespacesHandler.ServeHTTP(w, r)
		case K8SServiceGetAllWorkloadNamesProcedure:
			k8SServiceGetAllWorkloadNamesHandler.ServeHTTP(w, r)
		case K8SServiceGetAllWorkloadLabelsProcedure:
			k8SServiceGetAllWorkloadLabelsHandler.ServeHTTP(w, r)
		case K8SServiceGetAllNodeGroupNamesProcedure:
			k8SServiceGetAllNodeGroupNamesHandler.ServeHTTP(w, r)
		case K8SServiceMetadataForWorkloadsProcedure:
			k8SServiceMetadataForWorkloadsHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupsProcedure:
			k8SServiceGetNodeGroupsHandler.ServeHTTP(w, r)
		case K8SServiceGetAllNodeGroupsProcedure:
			k8SServiceGetAllNodeGroupsHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupsUtilizationProcedure:
			k8SServiceGetNodeGroupsUtilizationHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupProcedure:
			k8SServiceGetNodeGroupHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeProcedure:
			k8SServiceGetNodeHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadsProcedure:
			k8SServiceGetWorkloadsHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadProcedure:
			k8SServiceGetWorkloadHandler.ServeHTTP(w, r)
		case K8SServiceGetForecastWorkloadsProcedure:
			k8SServiceGetForecastWorkloadsHandler.ServeHTTP(w, r)
		case K8SServiceGetForecastWorkloadProcedure:
			k8SServiceGetForecastWorkloadHandler.ServeHTTP(w, r)
		case K8SServiceGetResourcesProcedure:
			k8SServiceGetResourcesHandler.ServeHTTP(w, r)
		case K8SServiceGetPodsProcedure:
			k8SServiceGetPodsHandler.ServeHTTP(w, r)
		case K8SServiceGetLatestOperatorVersionProcedure:
			k8SServiceGetLatestOperatorVersionHandler.ServeHTTP(w, r)
		case K8SServiceGalaxyGetClusterPerspectiveProcedure:
			k8SServiceGalaxyGetClusterPerspectiveHandler.ServeHTTP(w, r)
		case K8SServiceGalaxyGetNodePerspectiveProcedure:
			k8SServiceGalaxyGetNodePerspectiveHandler.ServeHTTP(w, r)
		case K8SServiceGalaxyGetWorkloadPerspectiveProcedure:
			k8SServiceGalaxyGetWorkloadPerspectiveHandler.ServeHTTP(w, r)
		case K8SServiceListAuditLogsProcedure:
			k8SServiceListAuditLogsHandler.ServeHTTP(w, r)
		case K8SServiceListAuditLogOriginatorsProcedure:
			k8SServiceListAuditLogOriginatorsHandler.ServeHTTP(w, r)
		case K8SServiceSendWorkloadEmailProcedure:
			k8SServiceSendWorkloadEmailHandler.ServeHTTP(w, r)
		case K8SServiceSendWeeklySummaryEmailProcedure:
			k8SServiceSendWeeklySummaryEmailHandler.ServeHTTP(w, r)
		case K8SServiceGetClustersNodeInfoProcedure:
			k8SServiceGetClustersNodeInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SServiceHandler struct{}

func (UnimplementedK8SServiceHandler) GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusters is not implemented"))
}

func (UnimplementedK8SServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.ListClusters is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetCluster is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClusterMetadata(context.Context, *connect.Request[v1.GetClusterMetadataRequest]) (*connect.Response[v1.GetClusterMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusterMetadata is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetAllNamespaces(context.Context, *connect.Request[v1.GetAllNamespacesRequest]) (*connect.Response[v1.GetAllNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetAllNamespaces is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetAllWorkloadNames(context.Context, *connect.Request[v1.GetAllWorkloadNamesRequest]) (*connect.Response[v1.GetAllWorkloadNamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetAllWorkloadNames is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetAllWorkloadLabels(context.Context, *connect.Request[v1.GetAllWorkloadLabelsRequest]) (*connect.Response[v1.GetAllWorkloadLabelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetAllWorkloadLabels is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetAllNodeGroupNames(context.Context, *connect.Request[v1.GetAllNodeGroupNamesRequest]) (*connect.Response[v1.GetAllNodeGroupNamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetAllNodeGroupNames is not implemented"))
}

func (UnimplementedK8SServiceHandler) MetadataForWorkloads(context.Context, *connect.Request[v1.MetadataForWorkloadsRequest]) (*connect.Response[v1.MetadataForWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.MetadataForWorkloads is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroups is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetAllNodeGroups(context.Context, *connect.Request[v1.GetAllNodeGroupsRequest]) (*connect.Response[v1.GetAllNodeGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetAllNodeGroups is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroupsUtilization(context.Context, *connect.Request[v1.GetNodeGroupsUtilizationRequest]) (*connect.Response[v1.GetNodeGroupsUtilizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroupsUtilization is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroup(context.Context, *connect.Request[v1.GetNodeGroupRequest]) (*connect.Response[v1.GetNodeGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroup is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNode is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloads is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkload is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetForecastWorkloads(context.Context, *connect.Request[v1.GetForecastWorkloadsRequest]) (*connect.Response[v1.GetForecastWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetForecastWorkloads is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetForecastWorkload(context.Context, *connect.Request[v1.GetForecastWorkloadRequest]) (*connect.Response[v1.GetForecastWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetForecastWorkload is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetResources is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetPods(context.Context, *connect.Request[v1.GetPodsRequest]) (*connect.Response[v1.GetPodsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetPods is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetLatestOperatorVersion(context.Context, *connect.Request[v1.GetLatestOperatorVersionRequest]) (*connect.Response[v1.GetLatestOperatorVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetLatestOperatorVersion is not implemented"))
}

func (UnimplementedK8SServiceHandler) GalaxyGetClusterPerspective(context.Context, *connect.Request[v1.GalaxyGetClusterPerspectiveRequest]) (*connect.Response[v1.GalaxyGetClusterPerspectiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GalaxyGetClusterPerspective is not implemented"))
}

func (UnimplementedK8SServiceHandler) GalaxyGetNodePerspective(context.Context, *connect.Request[v1.GalaxyGetNodePerspectiveRequest]) (*connect.Response[v1.GalaxyGetNodePerspectiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GalaxyGetNodePerspective is not implemented"))
}

func (UnimplementedK8SServiceHandler) GalaxyGetWorkloadPerspective(context.Context, *connect.Request[v1.GalaxyGetWorkloadPerspectiveRequest]) (*connect.Response[v1.GalaxyGetWorkloadPerspectiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GalaxyGetWorkloadPerspective is not implemented"))
}

func (UnimplementedK8SServiceHandler) ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.ListAuditLogs is not implemented"))
}

func (UnimplementedK8SServiceHandler) ListAuditLogOriginators(context.Context, *connect.Request[v1.ListAuditLogOriginatorsRequest]) (*connect.Response[v1.ListAuditLogOriginatorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.ListAuditLogOriginators is not implemented"))
}

func (UnimplementedK8SServiceHandler) SendWorkloadEmail(context.Context, *connect.Request[v1.SendWorkloadEmailRequest]) (*connect.Response[v1.SendWorkloadEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.SendWorkloadEmail is not implemented"))
}

func (UnimplementedK8SServiceHandler) SendWeeklySummaryEmail(context.Context, *connect.Request[v1.SendWeeklySummaryEmailRequest]) (*connect.Response[v1.SendWeeklySummaryEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.SendWeeklySummaryEmail is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClustersNodeInfo(context.Context, *connect.Request[v1.GetClustersNodeInfoRequest]) (*connect.Response[v1.GetClustersNodeInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClustersNodeInfo is not implemented"))
}

// ClusterMutationServiceClient is a client for the api.v1.ClusterMutationService service.
type ClusterMutationServiceClient interface {
	// CreateCluster creates a new cluster.
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// DeleteCluster deletes a cluster and all its resources.
	// This operation is irreversible and should be used with caution.
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// UpdateCluster updates the configuration of an existing cluster.
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	// ResetClusterToken resets the token for a cluster.
	ResetClusterToken(context.Context, *connect.Request[v1.ResetClusterTokenRequest]) (*connect.Response[v1.ResetClusterTokenResponse], error)
}

// NewClusterMutationServiceClient constructs a client for the api.v1.ClusterMutationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterMutationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterMutationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterMutationServiceClient{
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.CreateClusterResponse](
			httpClient,
			baseURL+ClusterMutationServiceCreateClusterProcedure,
			opts...,
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ClusterMutationServiceDeleteClusterProcedure,
			opts...,
		),
		updateCluster: connect.NewClient[v1.UpdateClusterRequest, v1.UpdateClusterResponse](
			httpClient,
			baseURL+ClusterMutationServiceUpdateClusterProcedure,
			opts...,
		),
		resetClusterToken: connect.NewClient[v1.ResetClusterTokenRequest, v1.ResetClusterTokenResponse](
			httpClient,
			baseURL+ClusterMutationServiceResetClusterTokenProcedure,
			opts...,
		),
	}
}

// clusterMutationServiceClient implements ClusterMutationServiceClient.
type clusterMutationServiceClient struct {
	createCluster     *connect.Client[v1.CreateClusterRequest, v1.CreateClusterResponse]
	deleteCluster     *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	updateCluster     *connect.Client[v1.UpdateClusterRequest, v1.UpdateClusterResponse]
	resetClusterToken *connect.Client[v1.ResetClusterTokenRequest, v1.ResetClusterTokenResponse]
}

// CreateCluster calls api.v1.ClusterMutationService.CreateCluster.
func (c *clusterMutationServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// DeleteCluster calls api.v1.ClusterMutationService.DeleteCluster.
func (c *clusterMutationServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// UpdateCluster calls api.v1.ClusterMutationService.UpdateCluster.
func (c *clusterMutationServiceClient) UpdateCluster(ctx context.Context, req *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// ResetClusterToken calls api.v1.ClusterMutationService.ResetClusterToken.
func (c *clusterMutationServiceClient) ResetClusterToken(ctx context.Context, req *connect.Request[v1.ResetClusterTokenRequest]) (*connect.Response[v1.ResetClusterTokenResponse], error) {
	return c.resetClusterToken.CallUnary(ctx, req)
}

// ClusterMutationServiceHandler is an implementation of the api.v1.ClusterMutationService service.
type ClusterMutationServiceHandler interface {
	// CreateCluster creates a new cluster.
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// DeleteCluster deletes a cluster and all its resources.
	// This operation is irreversible and should be used with caution.
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// UpdateCluster updates the configuration of an existing cluster.
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	// ResetClusterToken resets the token for a cluster.
	ResetClusterToken(context.Context, *connect.Request[v1.ResetClusterTokenRequest]) (*connect.Response[v1.ResetClusterTokenResponse], error)
}

// NewClusterMutationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterMutationServiceHandler(svc ClusterMutationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterMutationServiceCreateClusterHandler := connect.NewUnaryHandler(
		ClusterMutationServiceCreateClusterProcedure,
		svc.CreateCluster,
		opts...,
	)
	clusterMutationServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterMutationServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		opts...,
	)
	clusterMutationServiceUpdateClusterHandler := connect.NewUnaryHandler(
		ClusterMutationServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		opts...,
	)
	clusterMutationServiceResetClusterTokenHandler := connect.NewUnaryHandler(
		ClusterMutationServiceResetClusterTokenProcedure,
		svc.ResetClusterToken,
		opts...,
	)
	return "/api.v1.ClusterMutationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterMutationServiceCreateClusterProcedure:
			clusterMutationServiceCreateClusterHandler.ServeHTTP(w, r)
		case ClusterMutationServiceDeleteClusterProcedure:
			clusterMutationServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ClusterMutationServiceUpdateClusterProcedure:
			clusterMutationServiceUpdateClusterHandler.ServeHTTP(w, r)
		case ClusterMutationServiceResetClusterTokenProcedure:
			clusterMutationServiceResetClusterTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterMutationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterMutationServiceHandler struct{}

func (UnimplementedClusterMutationServiceHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ClusterMutationService.CreateCluster is not implemented"))
}

func (UnimplementedClusterMutationServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ClusterMutationService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterMutationServiceHandler) UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ClusterMutationService.UpdateCluster is not implemented"))
}

func (UnimplementedClusterMutationServiceHandler) ResetClusterToken(context.Context, *connect.Request[v1.ResetClusterTokenRequest]) (*connect.Response[v1.ResetClusterTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ClusterMutationService.ResetClusterToken is not implemented"))
}

// UtilizationServiceClient is a client for the api.v1.UtilizationService service.
type UtilizationServiceClient interface {
	DailyUtilization(context.Context, *connect.Request[v1.DailyUtilizationRequest]) (*connect.Response[v1.DailyUtilizationResponse], error)
	DailyUtilizationInstanceType(context.Context, *connect.Request[v1.DailyUtilizationInstanceTypeRequest]) (*connect.Response[v1.DailyUtilizationInstanceTypeResponse], error)
	DailyUtilizationNodeType(context.Context, *connect.Request[v1.DailyUtilizationNodeTypeRequest]) (*connect.Response[v1.DailyUtilizationNodeTypeResponse], error)
}

// NewUtilizationServiceClient constructs a client for the api.v1.UtilizationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUtilizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UtilizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &utilizationServiceClient{
		dailyUtilization: connect.NewClient[v1.DailyUtilizationRequest, v1.DailyUtilizationResponse](
			httpClient,
			baseURL+UtilizationServiceDailyUtilizationProcedure,
			opts...,
		),
		dailyUtilizationInstanceType: connect.NewClient[v1.DailyUtilizationInstanceTypeRequest, v1.DailyUtilizationInstanceTypeResponse](
			httpClient,
			baseURL+UtilizationServiceDailyUtilizationInstanceTypeProcedure,
			opts...,
		),
		dailyUtilizationNodeType: connect.NewClient[v1.DailyUtilizationNodeTypeRequest, v1.DailyUtilizationNodeTypeResponse](
			httpClient,
			baseURL+UtilizationServiceDailyUtilizationNodeTypeProcedure,
			opts...,
		),
	}
}

// utilizationServiceClient implements UtilizationServiceClient.
type utilizationServiceClient struct {
	dailyUtilization             *connect.Client[v1.DailyUtilizationRequest, v1.DailyUtilizationResponse]
	dailyUtilizationInstanceType *connect.Client[v1.DailyUtilizationInstanceTypeRequest, v1.DailyUtilizationInstanceTypeResponse]
	dailyUtilizationNodeType     *connect.Client[v1.DailyUtilizationNodeTypeRequest, v1.DailyUtilizationNodeTypeResponse]
}

// DailyUtilization calls api.v1.UtilizationService.DailyUtilization.
func (c *utilizationServiceClient) DailyUtilization(ctx context.Context, req *connect.Request[v1.DailyUtilizationRequest]) (*connect.Response[v1.DailyUtilizationResponse], error) {
	return c.dailyUtilization.CallUnary(ctx, req)
}

// DailyUtilizationInstanceType calls api.v1.UtilizationService.DailyUtilizationInstanceType.
func (c *utilizationServiceClient) DailyUtilizationInstanceType(ctx context.Context, req *connect.Request[v1.DailyUtilizationInstanceTypeRequest]) (*connect.Response[v1.DailyUtilizationInstanceTypeResponse], error) {
	return c.dailyUtilizationInstanceType.CallUnary(ctx, req)
}

// DailyUtilizationNodeType calls api.v1.UtilizationService.DailyUtilizationNodeType.
func (c *utilizationServiceClient) DailyUtilizationNodeType(ctx context.Context, req *connect.Request[v1.DailyUtilizationNodeTypeRequest]) (*connect.Response[v1.DailyUtilizationNodeTypeResponse], error) {
	return c.dailyUtilizationNodeType.CallUnary(ctx, req)
}

// UtilizationServiceHandler is an implementation of the api.v1.UtilizationService service.
type UtilizationServiceHandler interface {
	DailyUtilization(context.Context, *connect.Request[v1.DailyUtilizationRequest]) (*connect.Response[v1.DailyUtilizationResponse], error)
	DailyUtilizationInstanceType(context.Context, *connect.Request[v1.DailyUtilizationInstanceTypeRequest]) (*connect.Response[v1.DailyUtilizationInstanceTypeResponse], error)
	DailyUtilizationNodeType(context.Context, *connect.Request[v1.DailyUtilizationNodeTypeRequest]) (*connect.Response[v1.DailyUtilizationNodeTypeResponse], error)
}

// NewUtilizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUtilizationServiceHandler(svc UtilizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	utilizationServiceDailyUtilizationHandler := connect.NewUnaryHandler(
		UtilizationServiceDailyUtilizationProcedure,
		svc.DailyUtilization,
		opts...,
	)
	utilizationServiceDailyUtilizationInstanceTypeHandler := connect.NewUnaryHandler(
		UtilizationServiceDailyUtilizationInstanceTypeProcedure,
		svc.DailyUtilizationInstanceType,
		opts...,
	)
	utilizationServiceDailyUtilizationNodeTypeHandler := connect.NewUnaryHandler(
		UtilizationServiceDailyUtilizationNodeTypeProcedure,
		svc.DailyUtilizationNodeType,
		opts...,
	)
	return "/api.v1.UtilizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UtilizationServiceDailyUtilizationProcedure:
			utilizationServiceDailyUtilizationHandler.ServeHTTP(w, r)
		case UtilizationServiceDailyUtilizationInstanceTypeProcedure:
			utilizationServiceDailyUtilizationInstanceTypeHandler.ServeHTTP(w, r)
		case UtilizationServiceDailyUtilizationNodeTypeProcedure:
			utilizationServiceDailyUtilizationNodeTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUtilizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUtilizationServiceHandler struct{}

func (UnimplementedUtilizationServiceHandler) DailyUtilization(context.Context, *connect.Request[v1.DailyUtilizationRequest]) (*connect.Response[v1.DailyUtilizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UtilizationService.DailyUtilization is not implemented"))
}

func (UnimplementedUtilizationServiceHandler) DailyUtilizationInstanceType(context.Context, *connect.Request[v1.DailyUtilizationInstanceTypeRequest]) (*connect.Response[v1.DailyUtilizationInstanceTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UtilizationService.DailyUtilizationInstanceType is not implemented"))
}

func (UnimplementedUtilizationServiceHandler) DailyUtilizationNodeType(context.Context, *connect.Request[v1.DailyUtilizationNodeTypeRequest]) (*connect.Response[v1.DailyUtilizationNodeTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UtilizationService.DailyUtilizationNodeType is not implemented"))
}
