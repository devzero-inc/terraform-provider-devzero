// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/recommendation.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/terraform-provider-devzero/internal/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8sRecommendationServiceName is the fully-qualified name of the K8sRecommendationService service.
	K8sRecommendationServiceName = "api.v1.K8sRecommendationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SRecommendationServiceGetNodeGroupStatsProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetNodeGroupStats RPC.
	K8SRecommendationServiceGetNodeGroupStatsProcedure = "/api.v1.K8sRecommendationService/GetNodeGroupStats"
	// K8SRecommendationServiceGetLatestNodeGroupRecommendationProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetLatestNodeGroupRecommendation RPC.
	K8SRecommendationServiceGetLatestNodeGroupRecommendationProcedure = "/api.v1.K8sRecommendationService/GetLatestNodeGroupRecommendation"
	// K8SRecommendationServiceGetPreviewNodeGroupRecommendationProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetPreviewNodeGroupRecommendation RPC.
	K8SRecommendationServiceGetPreviewNodeGroupRecommendationProcedure = "/api.v1.K8sRecommendationService/GetPreviewNodeGroupRecommendation"
	// K8SRecommendationServiceGetWorkloadStatsProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetWorkloadStats RPC.
	K8SRecommendationServiceGetWorkloadStatsProcedure = "/api.v1.K8sRecommendationService/GetWorkloadStats"
	// K8SRecommendationServiceGetLatestWorkloadRecommendationProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetLatestWorkloadRecommendation RPC.
	K8SRecommendationServiceGetLatestWorkloadRecommendationProcedure = "/api.v1.K8sRecommendationService/GetLatestWorkloadRecommendation"
	// K8SRecommendationServiceGetPreviewWorkloadRecommendationProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetPreviewWorkloadRecommendation RPC.
	K8SRecommendationServiceGetPreviewWorkloadRecommendationProcedure = "/api.v1.K8sRecommendationService/GetPreviewWorkloadRecommendation"
	// K8SRecommendationServiceGetPreviewWorkloadRecommendationsProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetPreviewWorkloadRecommendations RPC.
	K8SRecommendationServiceGetPreviewWorkloadRecommendationsProcedure = "/api.v1.K8sRecommendationService/GetPreviewWorkloadRecommendations"
	// K8SRecommendationServiceGetRecommendationsForWorkloadProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetRecommendationsForWorkload RPC.
	K8SRecommendationServiceGetRecommendationsForWorkloadProcedure = "/api.v1.K8sRecommendationService/GetRecommendationsForWorkload"
	// K8SRecommendationServiceGetRecommendationsProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetRecommendations RPC.
	K8SRecommendationServiceGetRecommendationsProcedure = "/api.v1.K8sRecommendationService/GetRecommendations"
	// K8SRecommendationServiceCreateNodeGroupRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's CreateNodeGroupRecommendationPolicy RPC.
	K8SRecommendationServiceCreateNodeGroupRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/CreateNodeGroupRecommendationPolicy"
	// K8SRecommendationServiceGetNodeGroupRecommendationPolicyProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetNodeGroupRecommendationPolicy RPC.
	K8SRecommendationServiceGetNodeGroupRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/GetNodeGroupRecommendationPolicy"
	// K8SRecommendationServiceListNodeGroupRecommendationPoliciesProcedure is the fully-qualified name
	// of the K8sRecommendationService's ListNodeGroupRecommendationPolicies RPC.
	K8SRecommendationServiceListNodeGroupRecommendationPoliciesProcedure = "/api.v1.K8sRecommendationService/ListNodeGroupRecommendationPolicies"
	// K8SRecommendationServiceUpdateNodeGroupRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's UpdateNodeGroupRecommendationPolicy RPC.
	K8SRecommendationServiceUpdateNodeGroupRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/UpdateNodeGroupRecommendationPolicy"
	// K8SRecommendationServiceDeleteNodeGroupRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's DeleteNodeGroupRecommendationPolicy RPC.
	K8SRecommendationServiceDeleteNodeGroupRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/DeleteNodeGroupRecommendationPolicy"
	// K8SRecommendationServiceAttachNodeGroupRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's AttachNodeGroupRecommendationPolicy RPC.
	K8SRecommendationServiceAttachNodeGroupRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/AttachNodeGroupRecommendationPolicy"
	// K8SRecommendationServiceCreateWorkloadRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's CreateWorkloadRecommendationPolicy RPC.
	K8SRecommendationServiceCreateWorkloadRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/CreateWorkloadRecommendationPolicy"
	// K8SRecommendationServiceGetWorkloadRecommendationPolicyProcedure is the fully-qualified name of
	// the K8sRecommendationService's GetWorkloadRecommendationPolicy RPC.
	K8SRecommendationServiceGetWorkloadRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/GetWorkloadRecommendationPolicy"
	// K8SRecommendationServiceListWorkloadRecommendationPoliciesProcedure is the fully-qualified name
	// of the K8sRecommendationService's ListWorkloadRecommendationPolicies RPC.
	K8SRecommendationServiceListWorkloadRecommendationPoliciesProcedure = "/api.v1.K8sRecommendationService/ListWorkloadRecommendationPolicies"
	// K8SRecommendationServiceUpdateWorkloadRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's UpdateWorkloadRecommendationPolicy RPC.
	K8SRecommendationServiceUpdateWorkloadRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/UpdateWorkloadRecommendationPolicy"
	// K8SRecommendationServiceDeleteWorkloadRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's DeleteWorkloadRecommendationPolicy RPC.
	K8SRecommendationServiceDeleteWorkloadRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/DeleteWorkloadRecommendationPolicy"
	// K8SRecommendationServiceAttachWorkloadRecommendationPolicyProcedure is the fully-qualified name
	// of the K8sRecommendationService's AttachWorkloadRecommendationPolicy RPC.
	K8SRecommendationServiceAttachWorkloadRecommendationPolicyProcedure = "/api.v1.K8sRecommendationService/AttachWorkloadRecommendationPolicy"
	// K8SRecommendationServiceAttachWorkloadRecommendationPoliciesProcedure is the fully-qualified name
	// of the K8sRecommendationService's AttachWorkloadRecommendationPolicies RPC.
	K8SRecommendationServiceAttachWorkloadRecommendationPoliciesProcedure = "/api.v1.K8sRecommendationService/AttachWorkloadRecommendationPolicies"
	// K8SRecommendationServiceCreateWorkloadPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's CreateWorkloadPolicyTarget RPC.
	K8SRecommendationServiceCreateWorkloadPolicyTargetProcedure = "/api.v1.K8sRecommendationService/CreateWorkloadPolicyTarget"
	// K8SRecommendationServiceGetWorkloadPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetWorkloadPolicyTarget RPC.
	K8SRecommendationServiceGetWorkloadPolicyTargetProcedure = "/api.v1.K8sRecommendationService/GetWorkloadPolicyTarget"
	// K8SRecommendationServiceListWorkloadPolicyTargetsProcedure is the fully-qualified name of the
	// K8sRecommendationService's ListWorkloadPolicyTargets RPC.
	K8SRecommendationServiceListWorkloadPolicyTargetsProcedure = "/api.v1.K8sRecommendationService/ListWorkloadPolicyTargets"
	// K8SRecommendationServiceUpdateWorkloadPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's UpdateWorkloadPolicyTarget RPC.
	K8SRecommendationServiceUpdateWorkloadPolicyTargetProcedure = "/api.v1.K8sRecommendationService/UpdateWorkloadPolicyTarget"
	// K8SRecommendationServiceDeleteWorkloadPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's DeleteWorkloadPolicyTarget RPC.
	K8SRecommendationServiceDeleteWorkloadPolicyTargetProcedure = "/api.v1.K8sRecommendationService/DeleteWorkloadPolicyTarget"
	// K8SRecommendationServiceToggleWorkloadPolicyTargetsProcedure is the fully-qualified name of the
	// K8sRecommendationService's ToggleWorkloadPolicyTargets RPC.
	K8SRecommendationServiceToggleWorkloadPolicyTargetsProcedure = "/api.v1.K8sRecommendationService/ToggleWorkloadPolicyTargets"
	// K8SRecommendationServicePreviewWorkloadPolicyTargetMatchesProcedure is the fully-qualified name
	// of the K8sRecommendationService's PreviewWorkloadPolicyTargetMatches RPC.
	K8SRecommendationServicePreviewWorkloadPolicyTargetMatchesProcedure = "/api.v1.K8sRecommendationService/PreviewWorkloadPolicyTargetMatches"
	// K8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsProcedure is the
	// fully-qualified name of the K8sRecommendationService's
	// GetPreviewWorkloadPolicyTargetRecommendations RPC.
	K8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsProcedure = "/api.v1.K8sRecommendationService/GetPreviewWorkloadPolicyTargetRecommendations"
	// K8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsProcedure is the fully-qualified
	// name of the K8sRecommendationService's GetWorkloadsWithAttachedPolicyTargets RPC.
	K8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsProcedure = "/api.v1.K8sRecommendationService/GetWorkloadsWithAttachedPolicyTargets"
	// K8SRecommendationServiceCreateNodeGroupPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's CreateNodeGroupPolicyTarget RPC.
	K8SRecommendationServiceCreateNodeGroupPolicyTargetProcedure = "/api.v1.K8sRecommendationService/CreateNodeGroupPolicyTarget"
	// K8SRecommendationServiceGetNodeGroupPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetNodeGroupPolicyTarget RPC.
	K8SRecommendationServiceGetNodeGroupPolicyTargetProcedure = "/api.v1.K8sRecommendationService/GetNodeGroupPolicyTarget"
	// K8SRecommendationServiceListNodeGroupPolicyTargetsProcedure is the fully-qualified name of the
	// K8sRecommendationService's ListNodeGroupPolicyTargets RPC.
	K8SRecommendationServiceListNodeGroupPolicyTargetsProcedure = "/api.v1.K8sRecommendationService/ListNodeGroupPolicyTargets"
	// K8SRecommendationServiceUpdateNodeGroupPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's UpdateNodeGroupPolicyTarget RPC.
	K8SRecommendationServiceUpdateNodeGroupPolicyTargetProcedure = "/api.v1.K8sRecommendationService/UpdateNodeGroupPolicyTarget"
	// K8SRecommendationServiceDeleteNodeGroupPolicyTargetProcedure is the fully-qualified name of the
	// K8sRecommendationService's DeleteNodeGroupPolicyTarget RPC.
	K8SRecommendationServiceDeleteNodeGroupPolicyTargetProcedure = "/api.v1.K8sRecommendationService/DeleteNodeGroupPolicyTarget"
	// K8SRecommendationServiceToggleNodeGroupPolicyTargetsProcedure is the fully-qualified name of the
	// K8sRecommendationService's ToggleNodeGroupPolicyTargets RPC.
	K8SRecommendationServiceToggleNodeGroupPolicyTargetsProcedure = "/api.v1.K8sRecommendationService/ToggleNodeGroupPolicyTargets"
	// K8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesProcedure is the fully-qualified name
	// of the K8sRecommendationService's PreviewNodeGroupPolicyTargetMatches RPC.
	K8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesProcedure = "/api.v1.K8sRecommendationService/PreviewNodeGroupPolicyTargetMatches"
	// K8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsProcedure is the
	// fully-qualified name of the K8sRecommendationService's
	// GetPreviewNodeGroupPolicyTargetRecommendations RPC.
	K8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsProcedure = "/api.v1.K8sRecommendationService/GetPreviewNodeGroupPolicyTargetRecommendations"
	// K8SRecommendationServiceBalanceGetRecommendationsProcedure is the fully-qualified name of the
	// K8sRecommendationService's BalanceGetRecommendations RPC.
	K8SRecommendationServiceBalanceGetRecommendationsProcedure = "/api.v1.K8sRecommendationService/BalanceGetRecommendations"
	// K8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupProcedure is the fully-qualified name
	// of the K8sRecommendationService's GetOptimalInstanceTypeForNodeGroup RPC.
	K8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupProcedure = "/api.v1.K8sRecommendationService/GetOptimalInstanceTypeForNodeGroup"
	// K8SRecommendationServiceGetAttachedNodeGroupPoliciesProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetAttachedNodeGroupPolicies RPC.
	K8SRecommendationServiceGetAttachedNodeGroupPoliciesProcedure = "/api.v1.K8sRecommendationService/GetAttachedNodeGroupPolicies"
	// K8SRecommendationServiceGetAttachedWorkloadPoliciesProcedure is the fully-qualified name of the
	// K8sRecommendationService's GetAttachedWorkloadPolicies RPC.
	K8SRecommendationServiceGetAttachedWorkloadPoliciesProcedure = "/api.v1.K8sRecommendationService/GetAttachedWorkloadPolicies"
	// K8SRecommendationServiceListAttachedWorkloadPoliciesProcedure is the fully-qualified name of the
	// K8sRecommendationService's ListAttachedWorkloadPolicies RPC.
	K8SRecommendationServiceListAttachedWorkloadPoliciesProcedure = "/api.v1.K8sRecommendationService/ListAttachedWorkloadPolicies"
	// K8SRecommendationServiceListAttachedNodeGroupPoliciesProcedure is the fully-qualified name of the
	// K8sRecommendationService's ListAttachedNodeGroupPolicies RPC.
	K8SRecommendationServiceListAttachedNodeGroupPoliciesProcedure = "/api.v1.K8sRecommendationService/ListAttachedNodeGroupPolicies"
	// K8SRecommendationServiceRecommendationEventsProcedure is the fully-qualified name of the
	// K8sRecommendationService's RecommendationEvents RPC.
	K8SRecommendationServiceRecommendationEventsProcedure = "/api.v1.K8sRecommendationService/RecommendationEvents"
	// K8SRecommendationServiceApplyRecommendationProcedure is the fully-qualified name of the
	// K8sRecommendationService's ApplyRecommendation RPC.
	K8SRecommendationServiceApplyRecommendationProcedure = "/api.v1.K8sRecommendationService/ApplyRecommendation"
	// K8SRecommendationServiceRecommendationAppliedProcedure is the fully-qualified name of the
	// K8sRecommendationService's RecommendationApplied RPC.
	K8SRecommendationServiceRecommendationAppliedProcedure = "/api.v1.K8sRecommendationService/RecommendationApplied"
	// K8SRecommendationServiceRetrieveSavingsForWorkloadProcedure is the fully-qualified name of the
	// K8sRecommendationService's RetrieveSavingsForWorkload RPC.
	K8SRecommendationServiceRetrieveSavingsForWorkloadProcedure = "/api.v1.K8sRecommendationService/RetrieveSavingsForWorkload"
)

// K8SRecommendationServiceClient is a client for the api.v1.K8sRecommendationService service.
type K8SRecommendationServiceClient interface {
	// Node Group Stats
	GetNodeGroupStats(context.Context, *connect.Request[v1.GetNodeGroupStatsRequest]) (*connect.Response[v1.GetNodeGroupStatsResponse], error)
	GetLatestNodeGroupRecommendation(context.Context, *connect.Request[v1.GetLatestNodeGroupRecommendationRequest]) (*connect.Response[v1.GetLatestNodeGroupRecommendationResponse], error)
	GetPreviewNodeGroupRecommendation(context.Context, *connect.Request[v1.GetPreviewNodeGroupRecommendationRequest]) (*connect.Response[v1.GetPreviewNodeGroupRecommendationResponse], error)
	// Workload Stats
	GetWorkloadStats(context.Context, *connect.Request[v1.GetWorkloadStatsRequest]) (*connect.Response[v1.GetWorkloadStatsResponse], error)
	GetLatestWorkloadRecommendation(context.Context, *connect.Request[v1.GetLatestWorkloadRecommendationRequest]) (*connect.Response[v1.GetLatestWorkloadRecommendationResponse], error)
	GetPreviewWorkloadRecommendation(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationResponse], error)
	GetPreviewWorkloadRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationsResponse], error)
	GetRecommendationsForWorkload(context.Context, *connect.Request[v1.GetRecommendationsForWorkloadRequest]) (*connect.Response[v1.GetRecommendationsForWorkloadResponse], error)
	GetRecommendations(context.Context, *connect.Request[v1.GetRecommendationsRequest]) (*connect.Response[v1.GetRecommendationsResponse], error)
	// NodeGroup Recommendation Policies
	CreateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.CreateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.CreateNodeGroupRecommendationPolicyResponse], error)
	GetNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.GetNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.GetNodeGroupRecommendationPolicyResponse], error)
	ListNodeGroupRecommendationPolicies(context.Context, *connect.Request[v1.ListNodeGroupRecommendationPoliciesRequest]) (*connect.Response[v1.ListNodeGroupRecommendationPoliciesResponse], error)
	UpdateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.UpdateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.UpdateNodeGroupRecommendationPolicyResponse], error)
	DeleteNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.DeleteNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.DeleteNodeGroupRecommendationPolicyResponse], error)
	AttachNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.AttachNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.AttachNodeGroupRecommendationPolicyResponse], error)
	// Workload Recommendation Policies
	CreateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.CreateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.CreateWorkloadRecommendationPolicyResponse], error)
	GetWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.GetWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.GetWorkloadRecommendationPolicyResponse], error)
	ListWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.ListWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.ListWorkloadRecommendationPoliciesResponse], error)
	UpdateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.UpdateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.UpdateWorkloadRecommendationPolicyResponse], error)
	DeleteWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.DeleteWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.DeleteWorkloadRecommendationPolicyResponse], error)
	AttachWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPolicyResponse], error)
	// AttachWorkloadRecommendationPolicies attaches a workload recommendation policy to multiple workloads
	AttachWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPoliciesResponse], error)
	// Workload Policy Targets (Pattern-Based Targeting)
	CreateWorkloadPolicyTarget(context.Context, *connect.Request[v1.CreateWorkloadPolicyTargetRequest]) (*connect.Response[v1.CreateWorkloadPolicyTargetResponse], error)
	GetWorkloadPolicyTarget(context.Context, *connect.Request[v1.GetWorkloadPolicyTargetRequest]) (*connect.Response[v1.GetWorkloadPolicyTargetResponse], error)
	ListWorkloadPolicyTargets(context.Context, *connect.Request[v1.ListWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ListWorkloadPolicyTargetsResponse], error)
	UpdateWorkloadPolicyTarget(context.Context, *connect.Request[v1.UpdateWorkloadPolicyTargetRequest]) (*connect.Response[v1.UpdateWorkloadPolicyTargetResponse], error)
	DeleteWorkloadPolicyTarget(context.Context, *connect.Request[v1.DeleteWorkloadPolicyTargetRequest]) (*connect.Response[v1.DeleteWorkloadPolicyTargetResponse], error)
	ToggleWorkloadPolicyTargets(context.Context, *connect.Request[v1.ToggleWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ToggleWorkloadPolicyTargetsResponse], error)
	PreviewWorkloadPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewWorkloadPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewWorkloadPolicyTargetMatchesResponse], error)
	GetPreviewWorkloadPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse], error)
	GetWorkloadsWithAttachedPolicyTargets(context.Context, *connect.Request[v1.GetWorkloadsWithAttachedPolicyTargetsRequest]) (*connect.Response[v1.GetWorkloadsWithAttachedPolicyTargetsResponse], error)
	// Node Policy Targets (Pattern-Based Targeting)
	CreateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.CreateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.CreateNodeGroupPolicyTargetResponse], error)
	GetNodeGroupPolicyTarget(context.Context, *connect.Request[v1.GetNodeGroupPolicyTargetRequest]) (*connect.Response[v1.GetNodeGroupPolicyTargetResponse], error)
	ListNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ListNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ListNodeGroupPolicyTargetsResponse], error)
	UpdateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.UpdateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.UpdateNodeGroupPolicyTargetResponse], error)
	DeleteNodeGroupPolicyTarget(context.Context, *connect.Request[v1.DeleteNodeGroupPolicyTargetRequest]) (*connect.Response[v1.DeleteNodeGroupPolicyTargetResponse], error)
	ToggleNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ToggleNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ToggleNodeGroupPolicyTargetsResponse], error)
	PreviewNodeGroupPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewNodeGroupPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewNodeGroupPolicyTargetMatchesResponse], error)
	GetPreviewNodeGroupPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse], error)
	// Balance get recommendations
	BalanceGetRecommendations(context.Context) *connect.BidiStreamForClient[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse]
	// website recommendations for optimal instance type for node group
	GetOptimalInstanceTypeForNodeGroup(context.Context, *connect.Request[v1.GetOptimalInstanceTypeForNodeGroupRequest]) (*connect.Response[v1.GetOptimalInstanceTypeForNodeGroupResponse], error)
	// Get attached node group policies
	GetAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.GetAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.GetAttachedNodeGroupPoliciesResponse], error)
	// Get attached workload policies
	GetAttachedWorkloadPolicies(context.Context, *connect.Request[v1.GetAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.GetAttachedWorkloadPoliciesResponse], error)
	// ListAttachedWorkloadPolicies retrieves all attached workload policies and workloads for a team
	ListAttachedWorkloadPolicies(context.Context, *connect.Request[v1.ListAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.ListAttachedWorkloadPoliciesResponse], error)
	// ListAttachedNodeGroupPolicies retrieves all attached node group policies and node groups for a team
	ListAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.ListAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.ListAttachedNodeGroupPoliciesResponse], error)
	// RecommendationEvents is a way for callers to retrieve the supported event types
	RecommendationEvents(context.Context, *connect.Request[v1.RecommendationEventsRequest]) (*connect.Response[v1.RecommendationEventsResponse], error)
	// ApplyRecommendation is a way for people to instruct the control plane to immediately signal the relevant operator to apply a recommendation.
	ApplyRecommendation(context.Context, *connect.Request[v1.ApplyRecommendationRequest]) (*connect.Response[v1.ApplyRecommendationResponse], error)
	// RecommendationApplied is a way for people to signal that a recommendation has been applied
	RecommendationApplied(context.Context, *connect.Request[v1.RecommendationAppliedRequest]) (*connect.Response[v1.RecommendationAppliedResponse], error)
	// RetrieveSavingsForWorkload retrieves optimization information about workloads;
	RetrieveSavingsForWorkload(context.Context, *connect.Request[v1.RetrieveSavingsForWorkloadRequest]) (*connect.Response[v1.RetrieveSavingsForWorkloadResponse], error)
}

// NewK8SRecommendationServiceClient constructs a client for the api.v1.K8sRecommendationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SRecommendationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SRecommendationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SRecommendationServiceClient{
		getNodeGroupStats: connect.NewClient[v1.GetNodeGroupStatsRequest, v1.GetNodeGroupStatsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetNodeGroupStatsProcedure,
			opts...,
		),
		getLatestNodeGroupRecommendation: connect.NewClient[v1.GetLatestNodeGroupRecommendationRequest, v1.GetLatestNodeGroupRecommendationResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetLatestNodeGroupRecommendationProcedure,
			opts...,
		),
		getPreviewNodeGroupRecommendation: connect.NewClient[v1.GetPreviewNodeGroupRecommendationRequest, v1.GetPreviewNodeGroupRecommendationResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetPreviewNodeGroupRecommendationProcedure,
			opts...,
		),
		getWorkloadStats: connect.NewClient[v1.GetWorkloadStatsRequest, v1.GetWorkloadStatsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetWorkloadStatsProcedure,
			opts...,
		),
		getLatestWorkloadRecommendation: connect.NewClient[v1.GetLatestWorkloadRecommendationRequest, v1.GetLatestWorkloadRecommendationResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetLatestWorkloadRecommendationProcedure,
			opts...,
		),
		getPreviewWorkloadRecommendation: connect.NewClient[v1.GetPreviewWorkloadRecommendationRequest, v1.GetPreviewWorkloadRecommendationResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetPreviewWorkloadRecommendationProcedure,
			opts...,
		),
		getPreviewWorkloadRecommendations: connect.NewClient[v1.GetPreviewWorkloadRecommendationsRequest, v1.GetPreviewWorkloadRecommendationsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetPreviewWorkloadRecommendationsProcedure,
			opts...,
		),
		getRecommendationsForWorkload: connect.NewClient[v1.GetRecommendationsForWorkloadRequest, v1.GetRecommendationsForWorkloadResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetRecommendationsForWorkloadProcedure,
			opts...,
		),
		getRecommendations: connect.NewClient[v1.GetRecommendationsRequest, v1.GetRecommendationsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetRecommendationsProcedure,
			opts...,
		),
		createNodeGroupRecommendationPolicy: connect.NewClient[v1.CreateNodeGroupRecommendationPolicyRequest, v1.CreateNodeGroupRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceCreateNodeGroupRecommendationPolicyProcedure,
			opts...,
		),
		getNodeGroupRecommendationPolicy: connect.NewClient[v1.GetNodeGroupRecommendationPolicyRequest, v1.GetNodeGroupRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetNodeGroupRecommendationPolicyProcedure,
			opts...,
		),
		listNodeGroupRecommendationPolicies: connect.NewClient[v1.ListNodeGroupRecommendationPoliciesRequest, v1.ListNodeGroupRecommendationPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListNodeGroupRecommendationPoliciesProcedure,
			opts...,
		),
		updateNodeGroupRecommendationPolicy: connect.NewClient[v1.UpdateNodeGroupRecommendationPolicyRequest, v1.UpdateNodeGroupRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceUpdateNodeGroupRecommendationPolicyProcedure,
			opts...,
		),
		deleteNodeGroupRecommendationPolicy: connect.NewClient[v1.DeleteNodeGroupRecommendationPolicyRequest, v1.DeleteNodeGroupRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceDeleteNodeGroupRecommendationPolicyProcedure,
			opts...,
		),
		attachNodeGroupRecommendationPolicy: connect.NewClient[v1.AttachNodeGroupRecommendationPolicyRequest, v1.AttachNodeGroupRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceAttachNodeGroupRecommendationPolicyProcedure,
			opts...,
		),
		createWorkloadRecommendationPolicy: connect.NewClient[v1.CreateWorkloadRecommendationPolicyRequest, v1.CreateWorkloadRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceCreateWorkloadRecommendationPolicyProcedure,
			opts...,
		),
		getWorkloadRecommendationPolicy: connect.NewClient[v1.GetWorkloadRecommendationPolicyRequest, v1.GetWorkloadRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetWorkloadRecommendationPolicyProcedure,
			opts...,
		),
		listWorkloadRecommendationPolicies: connect.NewClient[v1.ListWorkloadRecommendationPoliciesRequest, v1.ListWorkloadRecommendationPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListWorkloadRecommendationPoliciesProcedure,
			opts...,
		),
		updateWorkloadRecommendationPolicy: connect.NewClient[v1.UpdateWorkloadRecommendationPolicyRequest, v1.UpdateWorkloadRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceUpdateWorkloadRecommendationPolicyProcedure,
			opts...,
		),
		deleteWorkloadRecommendationPolicy: connect.NewClient[v1.DeleteWorkloadRecommendationPolicyRequest, v1.DeleteWorkloadRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceDeleteWorkloadRecommendationPolicyProcedure,
			opts...,
		),
		attachWorkloadRecommendationPolicy: connect.NewClient[v1.AttachWorkloadRecommendationPolicyRequest, v1.AttachWorkloadRecommendationPolicyResponse](
			httpClient,
			baseURL+K8SRecommendationServiceAttachWorkloadRecommendationPolicyProcedure,
			opts...,
		),
		attachWorkloadRecommendationPolicies: connect.NewClient[v1.AttachWorkloadRecommendationPoliciesRequest, v1.AttachWorkloadRecommendationPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceAttachWorkloadRecommendationPoliciesProcedure,
			opts...,
		),
		createWorkloadPolicyTarget: connect.NewClient[v1.CreateWorkloadPolicyTargetRequest, v1.CreateWorkloadPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceCreateWorkloadPolicyTargetProcedure,
			opts...,
		),
		getWorkloadPolicyTarget: connect.NewClient[v1.GetWorkloadPolicyTargetRequest, v1.GetWorkloadPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetWorkloadPolicyTargetProcedure,
			opts...,
		),
		listWorkloadPolicyTargets: connect.NewClient[v1.ListWorkloadPolicyTargetsRequest, v1.ListWorkloadPolicyTargetsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListWorkloadPolicyTargetsProcedure,
			opts...,
		),
		updateWorkloadPolicyTarget: connect.NewClient[v1.UpdateWorkloadPolicyTargetRequest, v1.UpdateWorkloadPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceUpdateWorkloadPolicyTargetProcedure,
			opts...,
		),
		deleteWorkloadPolicyTarget: connect.NewClient[v1.DeleteWorkloadPolicyTargetRequest, v1.DeleteWorkloadPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceDeleteWorkloadPolicyTargetProcedure,
			opts...,
		),
		toggleWorkloadPolicyTargets: connect.NewClient[v1.ToggleWorkloadPolicyTargetsRequest, v1.ToggleWorkloadPolicyTargetsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceToggleWorkloadPolicyTargetsProcedure,
			opts...,
		),
		previewWorkloadPolicyTargetMatches: connect.NewClient[v1.PreviewWorkloadPolicyTargetMatchesRequest, v1.PreviewWorkloadPolicyTargetMatchesResponse](
			httpClient,
			baseURL+K8SRecommendationServicePreviewWorkloadPolicyTargetMatchesProcedure,
			opts...,
		),
		getPreviewWorkloadPolicyTargetRecommendations: connect.NewClient[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest, v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsProcedure,
			opts...,
		),
		getWorkloadsWithAttachedPolicyTargets: connect.NewClient[v1.GetWorkloadsWithAttachedPolicyTargetsRequest, v1.GetWorkloadsWithAttachedPolicyTargetsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsProcedure,
			opts...,
		),
		createNodeGroupPolicyTarget: connect.NewClient[v1.CreateNodeGroupPolicyTargetRequest, v1.CreateNodeGroupPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceCreateNodeGroupPolicyTargetProcedure,
			opts...,
		),
		getNodeGroupPolicyTarget: connect.NewClient[v1.GetNodeGroupPolicyTargetRequest, v1.GetNodeGroupPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetNodeGroupPolicyTargetProcedure,
			opts...,
		),
		listNodeGroupPolicyTargets: connect.NewClient[v1.ListNodeGroupPolicyTargetsRequest, v1.ListNodeGroupPolicyTargetsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListNodeGroupPolicyTargetsProcedure,
			opts...,
		),
		updateNodeGroupPolicyTarget: connect.NewClient[v1.UpdateNodeGroupPolicyTargetRequest, v1.UpdateNodeGroupPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceUpdateNodeGroupPolicyTargetProcedure,
			opts...,
		),
		deleteNodeGroupPolicyTarget: connect.NewClient[v1.DeleteNodeGroupPolicyTargetRequest, v1.DeleteNodeGroupPolicyTargetResponse](
			httpClient,
			baseURL+K8SRecommendationServiceDeleteNodeGroupPolicyTargetProcedure,
			opts...,
		),
		toggleNodeGroupPolicyTargets: connect.NewClient[v1.ToggleNodeGroupPolicyTargetsRequest, v1.ToggleNodeGroupPolicyTargetsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceToggleNodeGroupPolicyTargetsProcedure,
			opts...,
		),
		previewNodeGroupPolicyTargetMatches: connect.NewClient[v1.PreviewNodeGroupPolicyTargetMatchesRequest, v1.PreviewNodeGroupPolicyTargetMatchesResponse](
			httpClient,
			baseURL+K8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesProcedure,
			opts...,
		),
		getPreviewNodeGroupPolicyTargetRecommendations: connect.NewClient[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest, v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsProcedure,
			opts...,
		),
		balanceGetRecommendations: connect.NewClient[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceBalanceGetRecommendationsProcedure,
			opts...,
		),
		getOptimalInstanceTypeForNodeGroup: connect.NewClient[v1.GetOptimalInstanceTypeForNodeGroupRequest, v1.GetOptimalInstanceTypeForNodeGroupResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupProcedure,
			opts...,
		),
		getAttachedNodeGroupPolicies: connect.NewClient[v1.GetAttachedNodeGroupPoliciesRequest, v1.GetAttachedNodeGroupPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetAttachedNodeGroupPoliciesProcedure,
			opts...,
		),
		getAttachedWorkloadPolicies: connect.NewClient[v1.GetAttachedWorkloadPoliciesRequest, v1.GetAttachedWorkloadPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceGetAttachedWorkloadPoliciesProcedure,
			opts...,
		),
		listAttachedWorkloadPolicies: connect.NewClient[v1.ListAttachedWorkloadPoliciesRequest, v1.ListAttachedWorkloadPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListAttachedWorkloadPoliciesProcedure,
			opts...,
		),
		listAttachedNodeGroupPolicies: connect.NewClient[v1.ListAttachedNodeGroupPoliciesRequest, v1.ListAttachedNodeGroupPoliciesResponse](
			httpClient,
			baseURL+K8SRecommendationServiceListAttachedNodeGroupPoliciesProcedure,
			opts...,
		),
		recommendationEvents: connect.NewClient[v1.RecommendationEventsRequest, v1.RecommendationEventsResponse](
			httpClient,
			baseURL+K8SRecommendationServiceRecommendationEventsProcedure,
			opts...,
		),
		applyRecommendation: connect.NewClient[v1.ApplyRecommendationRequest, v1.ApplyRecommendationResponse](
			httpClient,
			baseURL+K8SRecommendationServiceApplyRecommendationProcedure,
			opts...,
		),
		recommendationApplied: connect.NewClient[v1.RecommendationAppliedRequest, v1.RecommendationAppliedResponse](
			httpClient,
			baseURL+K8SRecommendationServiceRecommendationAppliedProcedure,
			opts...,
		),
		retrieveSavingsForWorkload: connect.NewClient[v1.RetrieveSavingsForWorkloadRequest, v1.RetrieveSavingsForWorkloadResponse](
			httpClient,
			baseURL+K8SRecommendationServiceRetrieveSavingsForWorkloadProcedure,
			opts...,
		),
	}
}

// k8SRecommendationServiceClient implements K8SRecommendationServiceClient.
type k8SRecommendationServiceClient struct {
	getNodeGroupStats                              *connect.Client[v1.GetNodeGroupStatsRequest, v1.GetNodeGroupStatsResponse]
	getLatestNodeGroupRecommendation               *connect.Client[v1.GetLatestNodeGroupRecommendationRequest, v1.GetLatestNodeGroupRecommendationResponse]
	getPreviewNodeGroupRecommendation              *connect.Client[v1.GetPreviewNodeGroupRecommendationRequest, v1.GetPreviewNodeGroupRecommendationResponse]
	getWorkloadStats                               *connect.Client[v1.GetWorkloadStatsRequest, v1.GetWorkloadStatsResponse]
	getLatestWorkloadRecommendation                *connect.Client[v1.GetLatestWorkloadRecommendationRequest, v1.GetLatestWorkloadRecommendationResponse]
	getPreviewWorkloadRecommendation               *connect.Client[v1.GetPreviewWorkloadRecommendationRequest, v1.GetPreviewWorkloadRecommendationResponse]
	getPreviewWorkloadRecommendations              *connect.Client[v1.GetPreviewWorkloadRecommendationsRequest, v1.GetPreviewWorkloadRecommendationsResponse]
	getRecommendationsForWorkload                  *connect.Client[v1.GetRecommendationsForWorkloadRequest, v1.GetRecommendationsForWorkloadResponse]
	getRecommendations                             *connect.Client[v1.GetRecommendationsRequest, v1.GetRecommendationsResponse]
	createNodeGroupRecommendationPolicy            *connect.Client[v1.CreateNodeGroupRecommendationPolicyRequest, v1.CreateNodeGroupRecommendationPolicyResponse]
	getNodeGroupRecommendationPolicy               *connect.Client[v1.GetNodeGroupRecommendationPolicyRequest, v1.GetNodeGroupRecommendationPolicyResponse]
	listNodeGroupRecommendationPolicies            *connect.Client[v1.ListNodeGroupRecommendationPoliciesRequest, v1.ListNodeGroupRecommendationPoliciesResponse]
	updateNodeGroupRecommendationPolicy            *connect.Client[v1.UpdateNodeGroupRecommendationPolicyRequest, v1.UpdateNodeGroupRecommendationPolicyResponse]
	deleteNodeGroupRecommendationPolicy            *connect.Client[v1.DeleteNodeGroupRecommendationPolicyRequest, v1.DeleteNodeGroupRecommendationPolicyResponse]
	attachNodeGroupRecommendationPolicy            *connect.Client[v1.AttachNodeGroupRecommendationPolicyRequest, v1.AttachNodeGroupRecommendationPolicyResponse]
	createWorkloadRecommendationPolicy             *connect.Client[v1.CreateWorkloadRecommendationPolicyRequest, v1.CreateWorkloadRecommendationPolicyResponse]
	getWorkloadRecommendationPolicy                *connect.Client[v1.GetWorkloadRecommendationPolicyRequest, v1.GetWorkloadRecommendationPolicyResponse]
	listWorkloadRecommendationPolicies             *connect.Client[v1.ListWorkloadRecommendationPoliciesRequest, v1.ListWorkloadRecommendationPoliciesResponse]
	updateWorkloadRecommendationPolicy             *connect.Client[v1.UpdateWorkloadRecommendationPolicyRequest, v1.UpdateWorkloadRecommendationPolicyResponse]
	deleteWorkloadRecommendationPolicy             *connect.Client[v1.DeleteWorkloadRecommendationPolicyRequest, v1.DeleteWorkloadRecommendationPolicyResponse]
	attachWorkloadRecommendationPolicy             *connect.Client[v1.AttachWorkloadRecommendationPolicyRequest, v1.AttachWorkloadRecommendationPolicyResponse]
	attachWorkloadRecommendationPolicies           *connect.Client[v1.AttachWorkloadRecommendationPoliciesRequest, v1.AttachWorkloadRecommendationPoliciesResponse]
	createWorkloadPolicyTarget                     *connect.Client[v1.CreateWorkloadPolicyTargetRequest, v1.CreateWorkloadPolicyTargetResponse]
	getWorkloadPolicyTarget                        *connect.Client[v1.GetWorkloadPolicyTargetRequest, v1.GetWorkloadPolicyTargetResponse]
	listWorkloadPolicyTargets                      *connect.Client[v1.ListWorkloadPolicyTargetsRequest, v1.ListWorkloadPolicyTargetsResponse]
	updateWorkloadPolicyTarget                     *connect.Client[v1.UpdateWorkloadPolicyTargetRequest, v1.UpdateWorkloadPolicyTargetResponse]
	deleteWorkloadPolicyTarget                     *connect.Client[v1.DeleteWorkloadPolicyTargetRequest, v1.DeleteWorkloadPolicyTargetResponse]
	toggleWorkloadPolicyTargets                    *connect.Client[v1.ToggleWorkloadPolicyTargetsRequest, v1.ToggleWorkloadPolicyTargetsResponse]
	previewWorkloadPolicyTargetMatches             *connect.Client[v1.PreviewWorkloadPolicyTargetMatchesRequest, v1.PreviewWorkloadPolicyTargetMatchesResponse]
	getPreviewWorkloadPolicyTargetRecommendations  *connect.Client[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest, v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse]
	getWorkloadsWithAttachedPolicyTargets          *connect.Client[v1.GetWorkloadsWithAttachedPolicyTargetsRequest, v1.GetWorkloadsWithAttachedPolicyTargetsResponse]
	createNodeGroupPolicyTarget                    *connect.Client[v1.CreateNodeGroupPolicyTargetRequest, v1.CreateNodeGroupPolicyTargetResponse]
	getNodeGroupPolicyTarget                       *connect.Client[v1.GetNodeGroupPolicyTargetRequest, v1.GetNodeGroupPolicyTargetResponse]
	listNodeGroupPolicyTargets                     *connect.Client[v1.ListNodeGroupPolicyTargetsRequest, v1.ListNodeGroupPolicyTargetsResponse]
	updateNodeGroupPolicyTarget                    *connect.Client[v1.UpdateNodeGroupPolicyTargetRequest, v1.UpdateNodeGroupPolicyTargetResponse]
	deleteNodeGroupPolicyTarget                    *connect.Client[v1.DeleteNodeGroupPolicyTargetRequest, v1.DeleteNodeGroupPolicyTargetResponse]
	toggleNodeGroupPolicyTargets                   *connect.Client[v1.ToggleNodeGroupPolicyTargetsRequest, v1.ToggleNodeGroupPolicyTargetsResponse]
	previewNodeGroupPolicyTargetMatches            *connect.Client[v1.PreviewNodeGroupPolicyTargetMatchesRequest, v1.PreviewNodeGroupPolicyTargetMatchesResponse]
	getPreviewNodeGroupPolicyTargetRecommendations *connect.Client[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest, v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse]
	balanceGetRecommendations                      *connect.Client[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse]
	getOptimalInstanceTypeForNodeGroup             *connect.Client[v1.GetOptimalInstanceTypeForNodeGroupRequest, v1.GetOptimalInstanceTypeForNodeGroupResponse]
	getAttachedNodeGroupPolicies                   *connect.Client[v1.GetAttachedNodeGroupPoliciesRequest, v1.GetAttachedNodeGroupPoliciesResponse]
	getAttachedWorkloadPolicies                    *connect.Client[v1.GetAttachedWorkloadPoliciesRequest, v1.GetAttachedWorkloadPoliciesResponse]
	listAttachedWorkloadPolicies                   *connect.Client[v1.ListAttachedWorkloadPoliciesRequest, v1.ListAttachedWorkloadPoliciesResponse]
	listAttachedNodeGroupPolicies                  *connect.Client[v1.ListAttachedNodeGroupPoliciesRequest, v1.ListAttachedNodeGroupPoliciesResponse]
	recommendationEvents                           *connect.Client[v1.RecommendationEventsRequest, v1.RecommendationEventsResponse]
	applyRecommendation                            *connect.Client[v1.ApplyRecommendationRequest, v1.ApplyRecommendationResponse]
	recommendationApplied                          *connect.Client[v1.RecommendationAppliedRequest, v1.RecommendationAppliedResponse]
	retrieveSavingsForWorkload                     *connect.Client[v1.RetrieveSavingsForWorkloadRequest, v1.RetrieveSavingsForWorkloadResponse]
}

// GetNodeGroupStats calls api.v1.K8sRecommendationService.GetNodeGroupStats.
func (c *k8SRecommendationServiceClient) GetNodeGroupStats(ctx context.Context, req *connect.Request[v1.GetNodeGroupStatsRequest]) (*connect.Response[v1.GetNodeGroupStatsResponse], error) {
	return c.getNodeGroupStats.CallUnary(ctx, req)
}

// GetLatestNodeGroupRecommendation calls
// api.v1.K8sRecommendationService.GetLatestNodeGroupRecommendation.
func (c *k8SRecommendationServiceClient) GetLatestNodeGroupRecommendation(ctx context.Context, req *connect.Request[v1.GetLatestNodeGroupRecommendationRequest]) (*connect.Response[v1.GetLatestNodeGroupRecommendationResponse], error) {
	return c.getLatestNodeGroupRecommendation.CallUnary(ctx, req)
}

// GetPreviewNodeGroupRecommendation calls
// api.v1.K8sRecommendationService.GetPreviewNodeGroupRecommendation.
func (c *k8SRecommendationServiceClient) GetPreviewNodeGroupRecommendation(ctx context.Context, req *connect.Request[v1.GetPreviewNodeGroupRecommendationRequest]) (*connect.Response[v1.GetPreviewNodeGroupRecommendationResponse], error) {
	return c.getPreviewNodeGroupRecommendation.CallUnary(ctx, req)
}

// GetWorkloadStats calls api.v1.K8sRecommendationService.GetWorkloadStats.
func (c *k8SRecommendationServiceClient) GetWorkloadStats(ctx context.Context, req *connect.Request[v1.GetWorkloadStatsRequest]) (*connect.Response[v1.GetWorkloadStatsResponse], error) {
	return c.getWorkloadStats.CallUnary(ctx, req)
}

// GetLatestWorkloadRecommendation calls
// api.v1.K8sRecommendationService.GetLatestWorkloadRecommendation.
func (c *k8SRecommendationServiceClient) GetLatestWorkloadRecommendation(ctx context.Context, req *connect.Request[v1.GetLatestWorkloadRecommendationRequest]) (*connect.Response[v1.GetLatestWorkloadRecommendationResponse], error) {
	return c.getLatestWorkloadRecommendation.CallUnary(ctx, req)
}

// GetPreviewWorkloadRecommendation calls
// api.v1.K8sRecommendationService.GetPreviewWorkloadRecommendation.
func (c *k8SRecommendationServiceClient) GetPreviewWorkloadRecommendation(ctx context.Context, req *connect.Request[v1.GetPreviewWorkloadRecommendationRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationResponse], error) {
	return c.getPreviewWorkloadRecommendation.CallUnary(ctx, req)
}

// GetPreviewWorkloadRecommendations calls
// api.v1.K8sRecommendationService.GetPreviewWorkloadRecommendations.
func (c *k8SRecommendationServiceClient) GetPreviewWorkloadRecommendations(ctx context.Context, req *connect.Request[v1.GetPreviewWorkloadRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationsResponse], error) {
	return c.getPreviewWorkloadRecommendations.CallUnary(ctx, req)
}

// GetRecommendationsForWorkload calls
// api.v1.K8sRecommendationService.GetRecommendationsForWorkload.
func (c *k8SRecommendationServiceClient) GetRecommendationsForWorkload(ctx context.Context, req *connect.Request[v1.GetRecommendationsForWorkloadRequest]) (*connect.Response[v1.GetRecommendationsForWorkloadResponse], error) {
	return c.getRecommendationsForWorkload.CallUnary(ctx, req)
}

// GetRecommendations calls api.v1.K8sRecommendationService.GetRecommendations.
func (c *k8SRecommendationServiceClient) GetRecommendations(ctx context.Context, req *connect.Request[v1.GetRecommendationsRequest]) (*connect.Response[v1.GetRecommendationsResponse], error) {
	return c.getRecommendations.CallUnary(ctx, req)
}

// CreateNodeGroupRecommendationPolicy calls
// api.v1.K8sRecommendationService.CreateNodeGroupRecommendationPolicy.
func (c *k8SRecommendationServiceClient) CreateNodeGroupRecommendationPolicy(ctx context.Context, req *connect.Request[v1.CreateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.CreateNodeGroupRecommendationPolicyResponse], error) {
	return c.createNodeGroupRecommendationPolicy.CallUnary(ctx, req)
}

// GetNodeGroupRecommendationPolicy calls
// api.v1.K8sRecommendationService.GetNodeGroupRecommendationPolicy.
func (c *k8SRecommendationServiceClient) GetNodeGroupRecommendationPolicy(ctx context.Context, req *connect.Request[v1.GetNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.GetNodeGroupRecommendationPolicyResponse], error) {
	return c.getNodeGroupRecommendationPolicy.CallUnary(ctx, req)
}

// ListNodeGroupRecommendationPolicies calls
// api.v1.K8sRecommendationService.ListNodeGroupRecommendationPolicies.
func (c *k8SRecommendationServiceClient) ListNodeGroupRecommendationPolicies(ctx context.Context, req *connect.Request[v1.ListNodeGroupRecommendationPoliciesRequest]) (*connect.Response[v1.ListNodeGroupRecommendationPoliciesResponse], error) {
	return c.listNodeGroupRecommendationPolicies.CallUnary(ctx, req)
}

// UpdateNodeGroupRecommendationPolicy calls
// api.v1.K8sRecommendationService.UpdateNodeGroupRecommendationPolicy.
func (c *k8SRecommendationServiceClient) UpdateNodeGroupRecommendationPolicy(ctx context.Context, req *connect.Request[v1.UpdateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.UpdateNodeGroupRecommendationPolicyResponse], error) {
	return c.updateNodeGroupRecommendationPolicy.CallUnary(ctx, req)
}

// DeleteNodeGroupRecommendationPolicy calls
// api.v1.K8sRecommendationService.DeleteNodeGroupRecommendationPolicy.
func (c *k8SRecommendationServiceClient) DeleteNodeGroupRecommendationPolicy(ctx context.Context, req *connect.Request[v1.DeleteNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.DeleteNodeGroupRecommendationPolicyResponse], error) {
	return c.deleteNodeGroupRecommendationPolicy.CallUnary(ctx, req)
}

// AttachNodeGroupRecommendationPolicy calls
// api.v1.K8sRecommendationService.AttachNodeGroupRecommendationPolicy.
func (c *k8SRecommendationServiceClient) AttachNodeGroupRecommendationPolicy(ctx context.Context, req *connect.Request[v1.AttachNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.AttachNodeGroupRecommendationPolicyResponse], error) {
	return c.attachNodeGroupRecommendationPolicy.CallUnary(ctx, req)
}

// CreateWorkloadRecommendationPolicy calls
// api.v1.K8sRecommendationService.CreateWorkloadRecommendationPolicy.
func (c *k8SRecommendationServiceClient) CreateWorkloadRecommendationPolicy(ctx context.Context, req *connect.Request[v1.CreateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.CreateWorkloadRecommendationPolicyResponse], error) {
	return c.createWorkloadRecommendationPolicy.CallUnary(ctx, req)
}

// GetWorkloadRecommendationPolicy calls
// api.v1.K8sRecommendationService.GetWorkloadRecommendationPolicy.
func (c *k8SRecommendationServiceClient) GetWorkloadRecommendationPolicy(ctx context.Context, req *connect.Request[v1.GetWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.GetWorkloadRecommendationPolicyResponse], error) {
	return c.getWorkloadRecommendationPolicy.CallUnary(ctx, req)
}

// ListWorkloadRecommendationPolicies calls
// api.v1.K8sRecommendationService.ListWorkloadRecommendationPolicies.
func (c *k8SRecommendationServiceClient) ListWorkloadRecommendationPolicies(ctx context.Context, req *connect.Request[v1.ListWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.ListWorkloadRecommendationPoliciesResponse], error) {
	return c.listWorkloadRecommendationPolicies.CallUnary(ctx, req)
}

// UpdateWorkloadRecommendationPolicy calls
// api.v1.K8sRecommendationService.UpdateWorkloadRecommendationPolicy.
func (c *k8SRecommendationServiceClient) UpdateWorkloadRecommendationPolicy(ctx context.Context, req *connect.Request[v1.UpdateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.UpdateWorkloadRecommendationPolicyResponse], error) {
	return c.updateWorkloadRecommendationPolicy.CallUnary(ctx, req)
}

// DeleteWorkloadRecommendationPolicy calls
// api.v1.K8sRecommendationService.DeleteWorkloadRecommendationPolicy.
func (c *k8SRecommendationServiceClient) DeleteWorkloadRecommendationPolicy(ctx context.Context, req *connect.Request[v1.DeleteWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.DeleteWorkloadRecommendationPolicyResponse], error) {
	return c.deleteWorkloadRecommendationPolicy.CallUnary(ctx, req)
}

// AttachWorkloadRecommendationPolicy calls
// api.v1.K8sRecommendationService.AttachWorkloadRecommendationPolicy.
func (c *k8SRecommendationServiceClient) AttachWorkloadRecommendationPolicy(ctx context.Context, req *connect.Request[v1.AttachWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPolicyResponse], error) {
	return c.attachWorkloadRecommendationPolicy.CallUnary(ctx, req)
}

// AttachWorkloadRecommendationPolicies calls
// api.v1.K8sRecommendationService.AttachWorkloadRecommendationPolicies.
func (c *k8SRecommendationServiceClient) AttachWorkloadRecommendationPolicies(ctx context.Context, req *connect.Request[v1.AttachWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPoliciesResponse], error) {
	return c.attachWorkloadRecommendationPolicies.CallUnary(ctx, req)
}

// CreateWorkloadPolicyTarget calls api.v1.K8sRecommendationService.CreateWorkloadPolicyTarget.
func (c *k8SRecommendationServiceClient) CreateWorkloadPolicyTarget(ctx context.Context, req *connect.Request[v1.CreateWorkloadPolicyTargetRequest]) (*connect.Response[v1.CreateWorkloadPolicyTargetResponse], error) {
	return c.createWorkloadPolicyTarget.CallUnary(ctx, req)
}

// GetWorkloadPolicyTarget calls api.v1.K8sRecommendationService.GetWorkloadPolicyTarget.
func (c *k8SRecommendationServiceClient) GetWorkloadPolicyTarget(ctx context.Context, req *connect.Request[v1.GetWorkloadPolicyTargetRequest]) (*connect.Response[v1.GetWorkloadPolicyTargetResponse], error) {
	return c.getWorkloadPolicyTarget.CallUnary(ctx, req)
}

// ListWorkloadPolicyTargets calls api.v1.K8sRecommendationService.ListWorkloadPolicyTargets.
func (c *k8SRecommendationServiceClient) ListWorkloadPolicyTargets(ctx context.Context, req *connect.Request[v1.ListWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ListWorkloadPolicyTargetsResponse], error) {
	return c.listWorkloadPolicyTargets.CallUnary(ctx, req)
}

// UpdateWorkloadPolicyTarget calls api.v1.K8sRecommendationService.UpdateWorkloadPolicyTarget.
func (c *k8SRecommendationServiceClient) UpdateWorkloadPolicyTarget(ctx context.Context, req *connect.Request[v1.UpdateWorkloadPolicyTargetRequest]) (*connect.Response[v1.UpdateWorkloadPolicyTargetResponse], error) {
	return c.updateWorkloadPolicyTarget.CallUnary(ctx, req)
}

// DeleteWorkloadPolicyTarget calls api.v1.K8sRecommendationService.DeleteWorkloadPolicyTarget.
func (c *k8SRecommendationServiceClient) DeleteWorkloadPolicyTarget(ctx context.Context, req *connect.Request[v1.DeleteWorkloadPolicyTargetRequest]) (*connect.Response[v1.DeleteWorkloadPolicyTargetResponse], error) {
	return c.deleteWorkloadPolicyTarget.CallUnary(ctx, req)
}

// ToggleWorkloadPolicyTargets calls api.v1.K8sRecommendationService.ToggleWorkloadPolicyTargets.
func (c *k8SRecommendationServiceClient) ToggleWorkloadPolicyTargets(ctx context.Context, req *connect.Request[v1.ToggleWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ToggleWorkloadPolicyTargetsResponse], error) {
	return c.toggleWorkloadPolicyTargets.CallUnary(ctx, req)
}

// PreviewWorkloadPolicyTargetMatches calls
// api.v1.K8sRecommendationService.PreviewWorkloadPolicyTargetMatches.
func (c *k8SRecommendationServiceClient) PreviewWorkloadPolicyTargetMatches(ctx context.Context, req *connect.Request[v1.PreviewWorkloadPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewWorkloadPolicyTargetMatchesResponse], error) {
	return c.previewWorkloadPolicyTargetMatches.CallUnary(ctx, req)
}

// GetPreviewWorkloadPolicyTargetRecommendations calls
// api.v1.K8sRecommendationService.GetPreviewWorkloadPolicyTargetRecommendations.
func (c *k8SRecommendationServiceClient) GetPreviewWorkloadPolicyTargetRecommendations(ctx context.Context, req *connect.Request[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse], error) {
	return c.getPreviewWorkloadPolicyTargetRecommendations.CallUnary(ctx, req)
}

// GetWorkloadsWithAttachedPolicyTargets calls
// api.v1.K8sRecommendationService.GetWorkloadsWithAttachedPolicyTargets.
func (c *k8SRecommendationServiceClient) GetWorkloadsWithAttachedPolicyTargets(ctx context.Context, req *connect.Request[v1.GetWorkloadsWithAttachedPolicyTargetsRequest]) (*connect.Response[v1.GetWorkloadsWithAttachedPolicyTargetsResponse], error) {
	return c.getWorkloadsWithAttachedPolicyTargets.CallUnary(ctx, req)
}

// CreateNodeGroupPolicyTarget calls api.v1.K8sRecommendationService.CreateNodeGroupPolicyTarget.
func (c *k8SRecommendationServiceClient) CreateNodeGroupPolicyTarget(ctx context.Context, req *connect.Request[v1.CreateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.CreateNodeGroupPolicyTargetResponse], error) {
	return c.createNodeGroupPolicyTarget.CallUnary(ctx, req)
}

// GetNodeGroupPolicyTarget calls api.v1.K8sRecommendationService.GetNodeGroupPolicyTarget.
func (c *k8SRecommendationServiceClient) GetNodeGroupPolicyTarget(ctx context.Context, req *connect.Request[v1.GetNodeGroupPolicyTargetRequest]) (*connect.Response[v1.GetNodeGroupPolicyTargetResponse], error) {
	return c.getNodeGroupPolicyTarget.CallUnary(ctx, req)
}

// ListNodeGroupPolicyTargets calls api.v1.K8sRecommendationService.ListNodeGroupPolicyTargets.
func (c *k8SRecommendationServiceClient) ListNodeGroupPolicyTargets(ctx context.Context, req *connect.Request[v1.ListNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ListNodeGroupPolicyTargetsResponse], error) {
	return c.listNodeGroupPolicyTargets.CallUnary(ctx, req)
}

// UpdateNodeGroupPolicyTarget calls api.v1.K8sRecommendationService.UpdateNodeGroupPolicyTarget.
func (c *k8SRecommendationServiceClient) UpdateNodeGroupPolicyTarget(ctx context.Context, req *connect.Request[v1.UpdateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.UpdateNodeGroupPolicyTargetResponse], error) {
	return c.updateNodeGroupPolicyTarget.CallUnary(ctx, req)
}

// DeleteNodeGroupPolicyTarget calls api.v1.K8sRecommendationService.DeleteNodeGroupPolicyTarget.
func (c *k8SRecommendationServiceClient) DeleteNodeGroupPolicyTarget(ctx context.Context, req *connect.Request[v1.DeleteNodeGroupPolicyTargetRequest]) (*connect.Response[v1.DeleteNodeGroupPolicyTargetResponse], error) {
	return c.deleteNodeGroupPolicyTarget.CallUnary(ctx, req)
}

// ToggleNodeGroupPolicyTargets calls api.v1.K8sRecommendationService.ToggleNodeGroupPolicyTargets.
func (c *k8SRecommendationServiceClient) ToggleNodeGroupPolicyTargets(ctx context.Context, req *connect.Request[v1.ToggleNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ToggleNodeGroupPolicyTargetsResponse], error) {
	return c.toggleNodeGroupPolicyTargets.CallUnary(ctx, req)
}

// PreviewNodeGroupPolicyTargetMatches calls
// api.v1.K8sRecommendationService.PreviewNodeGroupPolicyTargetMatches.
func (c *k8SRecommendationServiceClient) PreviewNodeGroupPolicyTargetMatches(ctx context.Context, req *connect.Request[v1.PreviewNodeGroupPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewNodeGroupPolicyTargetMatchesResponse], error) {
	return c.previewNodeGroupPolicyTargetMatches.CallUnary(ctx, req)
}

// GetPreviewNodeGroupPolicyTargetRecommendations calls
// api.v1.K8sRecommendationService.GetPreviewNodeGroupPolicyTargetRecommendations.
func (c *k8SRecommendationServiceClient) GetPreviewNodeGroupPolicyTargetRecommendations(ctx context.Context, req *connect.Request[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse], error) {
	return c.getPreviewNodeGroupPolicyTargetRecommendations.CallUnary(ctx, req)
}

// BalanceGetRecommendations calls api.v1.K8sRecommendationService.BalanceGetRecommendations.
func (c *k8SRecommendationServiceClient) BalanceGetRecommendations(ctx context.Context) *connect.BidiStreamForClient[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse] {
	return c.balanceGetRecommendations.CallBidiStream(ctx)
}

// GetOptimalInstanceTypeForNodeGroup calls
// api.v1.K8sRecommendationService.GetOptimalInstanceTypeForNodeGroup.
func (c *k8SRecommendationServiceClient) GetOptimalInstanceTypeForNodeGroup(ctx context.Context, req *connect.Request[v1.GetOptimalInstanceTypeForNodeGroupRequest]) (*connect.Response[v1.GetOptimalInstanceTypeForNodeGroupResponse], error) {
	return c.getOptimalInstanceTypeForNodeGroup.CallUnary(ctx, req)
}

// GetAttachedNodeGroupPolicies calls api.v1.K8sRecommendationService.GetAttachedNodeGroupPolicies.
func (c *k8SRecommendationServiceClient) GetAttachedNodeGroupPolicies(ctx context.Context, req *connect.Request[v1.GetAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.GetAttachedNodeGroupPoliciesResponse], error) {
	return c.getAttachedNodeGroupPolicies.CallUnary(ctx, req)
}

// GetAttachedWorkloadPolicies calls api.v1.K8sRecommendationService.GetAttachedWorkloadPolicies.
func (c *k8SRecommendationServiceClient) GetAttachedWorkloadPolicies(ctx context.Context, req *connect.Request[v1.GetAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.GetAttachedWorkloadPoliciesResponse], error) {
	return c.getAttachedWorkloadPolicies.CallUnary(ctx, req)
}

// ListAttachedWorkloadPolicies calls api.v1.K8sRecommendationService.ListAttachedWorkloadPolicies.
func (c *k8SRecommendationServiceClient) ListAttachedWorkloadPolicies(ctx context.Context, req *connect.Request[v1.ListAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.ListAttachedWorkloadPoliciesResponse], error) {
	return c.listAttachedWorkloadPolicies.CallUnary(ctx, req)
}

// ListAttachedNodeGroupPolicies calls
// api.v1.K8sRecommendationService.ListAttachedNodeGroupPolicies.
func (c *k8SRecommendationServiceClient) ListAttachedNodeGroupPolicies(ctx context.Context, req *connect.Request[v1.ListAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.ListAttachedNodeGroupPoliciesResponse], error) {
	return c.listAttachedNodeGroupPolicies.CallUnary(ctx, req)
}

// RecommendationEvents calls api.v1.K8sRecommendationService.RecommendationEvents.
func (c *k8SRecommendationServiceClient) RecommendationEvents(ctx context.Context, req *connect.Request[v1.RecommendationEventsRequest]) (*connect.Response[v1.RecommendationEventsResponse], error) {
	return c.recommendationEvents.CallUnary(ctx, req)
}

// ApplyRecommendation calls api.v1.K8sRecommendationService.ApplyRecommendation.
func (c *k8SRecommendationServiceClient) ApplyRecommendation(ctx context.Context, req *connect.Request[v1.ApplyRecommendationRequest]) (*connect.Response[v1.ApplyRecommendationResponse], error) {
	return c.applyRecommendation.CallUnary(ctx, req)
}

// RecommendationApplied calls api.v1.K8sRecommendationService.RecommendationApplied.
func (c *k8SRecommendationServiceClient) RecommendationApplied(ctx context.Context, req *connect.Request[v1.RecommendationAppliedRequest]) (*connect.Response[v1.RecommendationAppliedResponse], error) {
	return c.recommendationApplied.CallUnary(ctx, req)
}

// RetrieveSavingsForWorkload calls api.v1.K8sRecommendationService.RetrieveSavingsForWorkload.
func (c *k8SRecommendationServiceClient) RetrieveSavingsForWorkload(ctx context.Context, req *connect.Request[v1.RetrieveSavingsForWorkloadRequest]) (*connect.Response[v1.RetrieveSavingsForWorkloadResponse], error) {
	return c.retrieveSavingsForWorkload.CallUnary(ctx, req)
}

// K8SRecommendationServiceHandler is an implementation of the api.v1.K8sRecommendationService
// service.
type K8SRecommendationServiceHandler interface {
	// Node Group Stats
	GetNodeGroupStats(context.Context, *connect.Request[v1.GetNodeGroupStatsRequest]) (*connect.Response[v1.GetNodeGroupStatsResponse], error)
	GetLatestNodeGroupRecommendation(context.Context, *connect.Request[v1.GetLatestNodeGroupRecommendationRequest]) (*connect.Response[v1.GetLatestNodeGroupRecommendationResponse], error)
	GetPreviewNodeGroupRecommendation(context.Context, *connect.Request[v1.GetPreviewNodeGroupRecommendationRequest]) (*connect.Response[v1.GetPreviewNodeGroupRecommendationResponse], error)
	// Workload Stats
	GetWorkloadStats(context.Context, *connect.Request[v1.GetWorkloadStatsRequest]) (*connect.Response[v1.GetWorkloadStatsResponse], error)
	GetLatestWorkloadRecommendation(context.Context, *connect.Request[v1.GetLatestWorkloadRecommendationRequest]) (*connect.Response[v1.GetLatestWorkloadRecommendationResponse], error)
	GetPreviewWorkloadRecommendation(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationResponse], error)
	GetPreviewWorkloadRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationsResponse], error)
	GetRecommendationsForWorkload(context.Context, *connect.Request[v1.GetRecommendationsForWorkloadRequest]) (*connect.Response[v1.GetRecommendationsForWorkloadResponse], error)
	GetRecommendations(context.Context, *connect.Request[v1.GetRecommendationsRequest]) (*connect.Response[v1.GetRecommendationsResponse], error)
	// NodeGroup Recommendation Policies
	CreateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.CreateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.CreateNodeGroupRecommendationPolicyResponse], error)
	GetNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.GetNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.GetNodeGroupRecommendationPolicyResponse], error)
	ListNodeGroupRecommendationPolicies(context.Context, *connect.Request[v1.ListNodeGroupRecommendationPoliciesRequest]) (*connect.Response[v1.ListNodeGroupRecommendationPoliciesResponse], error)
	UpdateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.UpdateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.UpdateNodeGroupRecommendationPolicyResponse], error)
	DeleteNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.DeleteNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.DeleteNodeGroupRecommendationPolicyResponse], error)
	AttachNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.AttachNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.AttachNodeGroupRecommendationPolicyResponse], error)
	// Workload Recommendation Policies
	CreateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.CreateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.CreateWorkloadRecommendationPolicyResponse], error)
	GetWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.GetWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.GetWorkloadRecommendationPolicyResponse], error)
	ListWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.ListWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.ListWorkloadRecommendationPoliciesResponse], error)
	UpdateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.UpdateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.UpdateWorkloadRecommendationPolicyResponse], error)
	DeleteWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.DeleteWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.DeleteWorkloadRecommendationPolicyResponse], error)
	AttachWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPolicyResponse], error)
	// AttachWorkloadRecommendationPolicies attaches a workload recommendation policy to multiple workloads
	AttachWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPoliciesResponse], error)
	// Workload Policy Targets (Pattern-Based Targeting)
	CreateWorkloadPolicyTarget(context.Context, *connect.Request[v1.CreateWorkloadPolicyTargetRequest]) (*connect.Response[v1.CreateWorkloadPolicyTargetResponse], error)
	GetWorkloadPolicyTarget(context.Context, *connect.Request[v1.GetWorkloadPolicyTargetRequest]) (*connect.Response[v1.GetWorkloadPolicyTargetResponse], error)
	ListWorkloadPolicyTargets(context.Context, *connect.Request[v1.ListWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ListWorkloadPolicyTargetsResponse], error)
	UpdateWorkloadPolicyTarget(context.Context, *connect.Request[v1.UpdateWorkloadPolicyTargetRequest]) (*connect.Response[v1.UpdateWorkloadPolicyTargetResponse], error)
	DeleteWorkloadPolicyTarget(context.Context, *connect.Request[v1.DeleteWorkloadPolicyTargetRequest]) (*connect.Response[v1.DeleteWorkloadPolicyTargetResponse], error)
	ToggleWorkloadPolicyTargets(context.Context, *connect.Request[v1.ToggleWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ToggleWorkloadPolicyTargetsResponse], error)
	PreviewWorkloadPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewWorkloadPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewWorkloadPolicyTargetMatchesResponse], error)
	GetPreviewWorkloadPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse], error)
	GetWorkloadsWithAttachedPolicyTargets(context.Context, *connect.Request[v1.GetWorkloadsWithAttachedPolicyTargetsRequest]) (*connect.Response[v1.GetWorkloadsWithAttachedPolicyTargetsResponse], error)
	// Node Policy Targets (Pattern-Based Targeting)
	CreateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.CreateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.CreateNodeGroupPolicyTargetResponse], error)
	GetNodeGroupPolicyTarget(context.Context, *connect.Request[v1.GetNodeGroupPolicyTargetRequest]) (*connect.Response[v1.GetNodeGroupPolicyTargetResponse], error)
	ListNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ListNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ListNodeGroupPolicyTargetsResponse], error)
	UpdateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.UpdateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.UpdateNodeGroupPolicyTargetResponse], error)
	DeleteNodeGroupPolicyTarget(context.Context, *connect.Request[v1.DeleteNodeGroupPolicyTargetRequest]) (*connect.Response[v1.DeleteNodeGroupPolicyTargetResponse], error)
	ToggleNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ToggleNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ToggleNodeGroupPolicyTargetsResponse], error)
	PreviewNodeGroupPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewNodeGroupPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewNodeGroupPolicyTargetMatchesResponse], error)
	GetPreviewNodeGroupPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse], error)
	// Balance get recommendations
	BalanceGetRecommendations(context.Context, *connect.BidiStream[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse]) error
	// website recommendations for optimal instance type for node group
	GetOptimalInstanceTypeForNodeGroup(context.Context, *connect.Request[v1.GetOptimalInstanceTypeForNodeGroupRequest]) (*connect.Response[v1.GetOptimalInstanceTypeForNodeGroupResponse], error)
	// Get attached node group policies
	GetAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.GetAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.GetAttachedNodeGroupPoliciesResponse], error)
	// Get attached workload policies
	GetAttachedWorkloadPolicies(context.Context, *connect.Request[v1.GetAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.GetAttachedWorkloadPoliciesResponse], error)
	// ListAttachedWorkloadPolicies retrieves all attached workload policies and workloads for a team
	ListAttachedWorkloadPolicies(context.Context, *connect.Request[v1.ListAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.ListAttachedWorkloadPoliciesResponse], error)
	// ListAttachedNodeGroupPolicies retrieves all attached node group policies and node groups for a team
	ListAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.ListAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.ListAttachedNodeGroupPoliciesResponse], error)
	// RecommendationEvents is a way for callers to retrieve the supported event types
	RecommendationEvents(context.Context, *connect.Request[v1.RecommendationEventsRequest]) (*connect.Response[v1.RecommendationEventsResponse], error)
	// ApplyRecommendation is a way for people to instruct the control plane to immediately signal the relevant operator to apply a recommendation.
	ApplyRecommendation(context.Context, *connect.Request[v1.ApplyRecommendationRequest]) (*connect.Response[v1.ApplyRecommendationResponse], error)
	// RecommendationApplied is a way for people to signal that a recommendation has been applied
	RecommendationApplied(context.Context, *connect.Request[v1.RecommendationAppliedRequest]) (*connect.Response[v1.RecommendationAppliedResponse], error)
	// RetrieveSavingsForWorkload retrieves optimization information about workloads;
	RetrieveSavingsForWorkload(context.Context, *connect.Request[v1.RetrieveSavingsForWorkloadRequest]) (*connect.Response[v1.RetrieveSavingsForWorkloadResponse], error)
}

// NewK8SRecommendationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SRecommendationServiceHandler(svc K8SRecommendationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SRecommendationServiceGetNodeGroupStatsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetNodeGroupStatsProcedure,
		svc.GetNodeGroupStats,
		opts...,
	)
	k8SRecommendationServiceGetLatestNodeGroupRecommendationHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetLatestNodeGroupRecommendationProcedure,
		svc.GetLatestNodeGroupRecommendation,
		opts...,
	)
	k8SRecommendationServiceGetPreviewNodeGroupRecommendationHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetPreviewNodeGroupRecommendationProcedure,
		svc.GetPreviewNodeGroupRecommendation,
		opts...,
	)
	k8SRecommendationServiceGetWorkloadStatsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetWorkloadStatsProcedure,
		svc.GetWorkloadStats,
		opts...,
	)
	k8SRecommendationServiceGetLatestWorkloadRecommendationHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetLatestWorkloadRecommendationProcedure,
		svc.GetLatestWorkloadRecommendation,
		opts...,
	)
	k8SRecommendationServiceGetPreviewWorkloadRecommendationHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetPreviewWorkloadRecommendationProcedure,
		svc.GetPreviewWorkloadRecommendation,
		opts...,
	)
	k8SRecommendationServiceGetPreviewWorkloadRecommendationsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetPreviewWorkloadRecommendationsProcedure,
		svc.GetPreviewWorkloadRecommendations,
		opts...,
	)
	k8SRecommendationServiceGetRecommendationsForWorkloadHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetRecommendationsForWorkloadProcedure,
		svc.GetRecommendationsForWorkload,
		opts...,
	)
	k8SRecommendationServiceGetRecommendationsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetRecommendationsProcedure,
		svc.GetRecommendations,
		opts...,
	)
	k8SRecommendationServiceCreateNodeGroupRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceCreateNodeGroupRecommendationPolicyProcedure,
		svc.CreateNodeGroupRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceGetNodeGroupRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetNodeGroupRecommendationPolicyProcedure,
		svc.GetNodeGroupRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceListNodeGroupRecommendationPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListNodeGroupRecommendationPoliciesProcedure,
		svc.ListNodeGroupRecommendationPolicies,
		opts...,
	)
	k8SRecommendationServiceUpdateNodeGroupRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceUpdateNodeGroupRecommendationPolicyProcedure,
		svc.UpdateNodeGroupRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceDeleteNodeGroupRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceDeleteNodeGroupRecommendationPolicyProcedure,
		svc.DeleteNodeGroupRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceAttachNodeGroupRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceAttachNodeGroupRecommendationPolicyProcedure,
		svc.AttachNodeGroupRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceCreateWorkloadRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceCreateWorkloadRecommendationPolicyProcedure,
		svc.CreateWorkloadRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceGetWorkloadRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetWorkloadRecommendationPolicyProcedure,
		svc.GetWorkloadRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceListWorkloadRecommendationPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListWorkloadRecommendationPoliciesProcedure,
		svc.ListWorkloadRecommendationPolicies,
		opts...,
	)
	k8SRecommendationServiceUpdateWorkloadRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceUpdateWorkloadRecommendationPolicyProcedure,
		svc.UpdateWorkloadRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceDeleteWorkloadRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceDeleteWorkloadRecommendationPolicyProcedure,
		svc.DeleteWorkloadRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceAttachWorkloadRecommendationPolicyHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceAttachWorkloadRecommendationPolicyProcedure,
		svc.AttachWorkloadRecommendationPolicy,
		opts...,
	)
	k8SRecommendationServiceAttachWorkloadRecommendationPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceAttachWorkloadRecommendationPoliciesProcedure,
		svc.AttachWorkloadRecommendationPolicies,
		opts...,
	)
	k8SRecommendationServiceCreateWorkloadPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceCreateWorkloadPolicyTargetProcedure,
		svc.CreateWorkloadPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceGetWorkloadPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetWorkloadPolicyTargetProcedure,
		svc.GetWorkloadPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceListWorkloadPolicyTargetsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListWorkloadPolicyTargetsProcedure,
		svc.ListWorkloadPolicyTargets,
		opts...,
	)
	k8SRecommendationServiceUpdateWorkloadPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceUpdateWorkloadPolicyTargetProcedure,
		svc.UpdateWorkloadPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceDeleteWorkloadPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceDeleteWorkloadPolicyTargetProcedure,
		svc.DeleteWorkloadPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceToggleWorkloadPolicyTargetsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceToggleWorkloadPolicyTargetsProcedure,
		svc.ToggleWorkloadPolicyTargets,
		opts...,
	)
	k8SRecommendationServicePreviewWorkloadPolicyTargetMatchesHandler := connect.NewUnaryHandler(
		K8SRecommendationServicePreviewWorkloadPolicyTargetMatchesProcedure,
		svc.PreviewWorkloadPolicyTargetMatches,
		opts...,
	)
	k8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsProcedure,
		svc.GetPreviewWorkloadPolicyTargetRecommendations,
		opts...,
	)
	k8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsProcedure,
		svc.GetWorkloadsWithAttachedPolicyTargets,
		opts...,
	)
	k8SRecommendationServiceCreateNodeGroupPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceCreateNodeGroupPolicyTargetProcedure,
		svc.CreateNodeGroupPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceGetNodeGroupPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetNodeGroupPolicyTargetProcedure,
		svc.GetNodeGroupPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceListNodeGroupPolicyTargetsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListNodeGroupPolicyTargetsProcedure,
		svc.ListNodeGroupPolicyTargets,
		opts...,
	)
	k8SRecommendationServiceUpdateNodeGroupPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceUpdateNodeGroupPolicyTargetProcedure,
		svc.UpdateNodeGroupPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceDeleteNodeGroupPolicyTargetHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceDeleteNodeGroupPolicyTargetProcedure,
		svc.DeleteNodeGroupPolicyTarget,
		opts...,
	)
	k8SRecommendationServiceToggleNodeGroupPolicyTargetsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceToggleNodeGroupPolicyTargetsProcedure,
		svc.ToggleNodeGroupPolicyTargets,
		opts...,
	)
	k8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesHandler := connect.NewUnaryHandler(
		K8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesProcedure,
		svc.PreviewNodeGroupPolicyTargetMatches,
		opts...,
	)
	k8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsProcedure,
		svc.GetPreviewNodeGroupPolicyTargetRecommendations,
		opts...,
	)
	k8SRecommendationServiceBalanceGetRecommendationsHandler := connect.NewBidiStreamHandler(
		K8SRecommendationServiceBalanceGetRecommendationsProcedure,
		svc.BalanceGetRecommendations,
		opts...,
	)
	k8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupProcedure,
		svc.GetOptimalInstanceTypeForNodeGroup,
		opts...,
	)
	k8SRecommendationServiceGetAttachedNodeGroupPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetAttachedNodeGroupPoliciesProcedure,
		svc.GetAttachedNodeGroupPolicies,
		opts...,
	)
	k8SRecommendationServiceGetAttachedWorkloadPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceGetAttachedWorkloadPoliciesProcedure,
		svc.GetAttachedWorkloadPolicies,
		opts...,
	)
	k8SRecommendationServiceListAttachedWorkloadPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListAttachedWorkloadPoliciesProcedure,
		svc.ListAttachedWorkloadPolicies,
		opts...,
	)
	k8SRecommendationServiceListAttachedNodeGroupPoliciesHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceListAttachedNodeGroupPoliciesProcedure,
		svc.ListAttachedNodeGroupPolicies,
		opts...,
	)
	k8SRecommendationServiceRecommendationEventsHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceRecommendationEventsProcedure,
		svc.RecommendationEvents,
		opts...,
	)
	k8SRecommendationServiceApplyRecommendationHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceApplyRecommendationProcedure,
		svc.ApplyRecommendation,
		opts...,
	)
	k8SRecommendationServiceRecommendationAppliedHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceRecommendationAppliedProcedure,
		svc.RecommendationApplied,
		opts...,
	)
	k8SRecommendationServiceRetrieveSavingsForWorkloadHandler := connect.NewUnaryHandler(
		K8SRecommendationServiceRetrieveSavingsForWorkloadProcedure,
		svc.RetrieveSavingsForWorkload,
		opts...,
	)
	return "/api.v1.K8sRecommendationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SRecommendationServiceGetNodeGroupStatsProcedure:
			k8SRecommendationServiceGetNodeGroupStatsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetLatestNodeGroupRecommendationProcedure:
			k8SRecommendationServiceGetLatestNodeGroupRecommendationHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetPreviewNodeGroupRecommendationProcedure:
			k8SRecommendationServiceGetPreviewNodeGroupRecommendationHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetWorkloadStatsProcedure:
			k8SRecommendationServiceGetWorkloadStatsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetLatestWorkloadRecommendationProcedure:
			k8SRecommendationServiceGetLatestWorkloadRecommendationHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetPreviewWorkloadRecommendationProcedure:
			k8SRecommendationServiceGetPreviewWorkloadRecommendationHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetPreviewWorkloadRecommendationsProcedure:
			k8SRecommendationServiceGetPreviewWorkloadRecommendationsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetRecommendationsForWorkloadProcedure:
			k8SRecommendationServiceGetRecommendationsForWorkloadHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetRecommendationsProcedure:
			k8SRecommendationServiceGetRecommendationsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceCreateNodeGroupRecommendationPolicyProcedure:
			k8SRecommendationServiceCreateNodeGroupRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetNodeGroupRecommendationPolicyProcedure:
			k8SRecommendationServiceGetNodeGroupRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListNodeGroupRecommendationPoliciesProcedure:
			k8SRecommendationServiceListNodeGroupRecommendationPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceUpdateNodeGroupRecommendationPolicyProcedure:
			k8SRecommendationServiceUpdateNodeGroupRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceDeleteNodeGroupRecommendationPolicyProcedure:
			k8SRecommendationServiceDeleteNodeGroupRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceAttachNodeGroupRecommendationPolicyProcedure:
			k8SRecommendationServiceAttachNodeGroupRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceCreateWorkloadRecommendationPolicyProcedure:
			k8SRecommendationServiceCreateWorkloadRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetWorkloadRecommendationPolicyProcedure:
			k8SRecommendationServiceGetWorkloadRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListWorkloadRecommendationPoliciesProcedure:
			k8SRecommendationServiceListWorkloadRecommendationPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceUpdateWorkloadRecommendationPolicyProcedure:
			k8SRecommendationServiceUpdateWorkloadRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceDeleteWorkloadRecommendationPolicyProcedure:
			k8SRecommendationServiceDeleteWorkloadRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceAttachWorkloadRecommendationPolicyProcedure:
			k8SRecommendationServiceAttachWorkloadRecommendationPolicyHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceAttachWorkloadRecommendationPoliciesProcedure:
			k8SRecommendationServiceAttachWorkloadRecommendationPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceCreateWorkloadPolicyTargetProcedure:
			k8SRecommendationServiceCreateWorkloadPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetWorkloadPolicyTargetProcedure:
			k8SRecommendationServiceGetWorkloadPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListWorkloadPolicyTargetsProcedure:
			k8SRecommendationServiceListWorkloadPolicyTargetsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceUpdateWorkloadPolicyTargetProcedure:
			k8SRecommendationServiceUpdateWorkloadPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceDeleteWorkloadPolicyTargetProcedure:
			k8SRecommendationServiceDeleteWorkloadPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceToggleWorkloadPolicyTargetsProcedure:
			k8SRecommendationServiceToggleWorkloadPolicyTargetsHandler.ServeHTTP(w, r)
		case K8SRecommendationServicePreviewWorkloadPolicyTargetMatchesProcedure:
			k8SRecommendationServicePreviewWorkloadPolicyTargetMatchesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsProcedure:
			k8SRecommendationServiceGetPreviewWorkloadPolicyTargetRecommendationsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsProcedure:
			k8SRecommendationServiceGetWorkloadsWithAttachedPolicyTargetsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceCreateNodeGroupPolicyTargetProcedure:
			k8SRecommendationServiceCreateNodeGroupPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetNodeGroupPolicyTargetProcedure:
			k8SRecommendationServiceGetNodeGroupPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListNodeGroupPolicyTargetsProcedure:
			k8SRecommendationServiceListNodeGroupPolicyTargetsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceUpdateNodeGroupPolicyTargetProcedure:
			k8SRecommendationServiceUpdateNodeGroupPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceDeleteNodeGroupPolicyTargetProcedure:
			k8SRecommendationServiceDeleteNodeGroupPolicyTargetHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceToggleNodeGroupPolicyTargetsProcedure:
			k8SRecommendationServiceToggleNodeGroupPolicyTargetsHandler.ServeHTTP(w, r)
		case K8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesProcedure:
			k8SRecommendationServicePreviewNodeGroupPolicyTargetMatchesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsProcedure:
			k8SRecommendationServiceGetPreviewNodeGroupPolicyTargetRecommendationsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceBalanceGetRecommendationsProcedure:
			k8SRecommendationServiceBalanceGetRecommendationsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupProcedure:
			k8SRecommendationServiceGetOptimalInstanceTypeForNodeGroupHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetAttachedNodeGroupPoliciesProcedure:
			k8SRecommendationServiceGetAttachedNodeGroupPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceGetAttachedWorkloadPoliciesProcedure:
			k8SRecommendationServiceGetAttachedWorkloadPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListAttachedWorkloadPoliciesProcedure:
			k8SRecommendationServiceListAttachedWorkloadPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceListAttachedNodeGroupPoliciesProcedure:
			k8SRecommendationServiceListAttachedNodeGroupPoliciesHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceRecommendationEventsProcedure:
			k8SRecommendationServiceRecommendationEventsHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceApplyRecommendationProcedure:
			k8SRecommendationServiceApplyRecommendationHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceRecommendationAppliedProcedure:
			k8SRecommendationServiceRecommendationAppliedHandler.ServeHTTP(w, r)
		case K8SRecommendationServiceRetrieveSavingsForWorkloadProcedure:
			k8SRecommendationServiceRetrieveSavingsForWorkloadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SRecommendationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SRecommendationServiceHandler struct{}

func (UnimplementedK8SRecommendationServiceHandler) GetNodeGroupStats(context.Context, *connect.Request[v1.GetNodeGroupStatsRequest]) (*connect.Response[v1.GetNodeGroupStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetNodeGroupStats is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetLatestNodeGroupRecommendation(context.Context, *connect.Request[v1.GetLatestNodeGroupRecommendationRequest]) (*connect.Response[v1.GetLatestNodeGroupRecommendationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetLatestNodeGroupRecommendation is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetPreviewNodeGroupRecommendation(context.Context, *connect.Request[v1.GetPreviewNodeGroupRecommendationRequest]) (*connect.Response[v1.GetPreviewNodeGroupRecommendationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetPreviewNodeGroupRecommendation is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetWorkloadStats(context.Context, *connect.Request[v1.GetWorkloadStatsRequest]) (*connect.Response[v1.GetWorkloadStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetWorkloadStats is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetLatestWorkloadRecommendation(context.Context, *connect.Request[v1.GetLatestWorkloadRecommendationRequest]) (*connect.Response[v1.GetLatestWorkloadRecommendationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetLatestWorkloadRecommendation is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetPreviewWorkloadRecommendation(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetPreviewWorkloadRecommendation is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetPreviewWorkloadRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadRecommendationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetPreviewWorkloadRecommendations is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetRecommendationsForWorkload(context.Context, *connect.Request[v1.GetRecommendationsForWorkloadRequest]) (*connect.Response[v1.GetRecommendationsForWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetRecommendationsForWorkload is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetRecommendations(context.Context, *connect.Request[v1.GetRecommendationsRequest]) (*connect.Response[v1.GetRecommendationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetRecommendations is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) CreateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.CreateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.CreateNodeGroupRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.CreateNodeGroupRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.GetNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.GetNodeGroupRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetNodeGroupRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListNodeGroupRecommendationPolicies(context.Context, *connect.Request[v1.ListNodeGroupRecommendationPoliciesRequest]) (*connect.Response[v1.ListNodeGroupRecommendationPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListNodeGroupRecommendationPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) UpdateNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.UpdateNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.UpdateNodeGroupRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.UpdateNodeGroupRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) DeleteNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.DeleteNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.DeleteNodeGroupRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.DeleteNodeGroupRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) AttachNodeGroupRecommendationPolicy(context.Context, *connect.Request[v1.AttachNodeGroupRecommendationPolicyRequest]) (*connect.Response[v1.AttachNodeGroupRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.AttachNodeGroupRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) CreateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.CreateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.CreateWorkloadRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.CreateWorkloadRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.GetWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.GetWorkloadRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetWorkloadRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.ListWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.ListWorkloadRecommendationPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListWorkloadRecommendationPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) UpdateWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.UpdateWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.UpdateWorkloadRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.UpdateWorkloadRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) DeleteWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.DeleteWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.DeleteWorkloadRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.DeleteWorkloadRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) AttachWorkloadRecommendationPolicy(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPolicyRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.AttachWorkloadRecommendationPolicy is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) AttachWorkloadRecommendationPolicies(context.Context, *connect.Request[v1.AttachWorkloadRecommendationPoliciesRequest]) (*connect.Response[v1.AttachWorkloadRecommendationPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.AttachWorkloadRecommendationPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) CreateWorkloadPolicyTarget(context.Context, *connect.Request[v1.CreateWorkloadPolicyTargetRequest]) (*connect.Response[v1.CreateWorkloadPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.CreateWorkloadPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetWorkloadPolicyTarget(context.Context, *connect.Request[v1.GetWorkloadPolicyTargetRequest]) (*connect.Response[v1.GetWorkloadPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetWorkloadPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListWorkloadPolicyTargets(context.Context, *connect.Request[v1.ListWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ListWorkloadPolicyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListWorkloadPolicyTargets is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) UpdateWorkloadPolicyTarget(context.Context, *connect.Request[v1.UpdateWorkloadPolicyTargetRequest]) (*connect.Response[v1.UpdateWorkloadPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.UpdateWorkloadPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) DeleteWorkloadPolicyTarget(context.Context, *connect.Request[v1.DeleteWorkloadPolicyTargetRequest]) (*connect.Response[v1.DeleteWorkloadPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.DeleteWorkloadPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ToggleWorkloadPolicyTargets(context.Context, *connect.Request[v1.ToggleWorkloadPolicyTargetsRequest]) (*connect.Response[v1.ToggleWorkloadPolicyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ToggleWorkloadPolicyTargets is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) PreviewWorkloadPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewWorkloadPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewWorkloadPolicyTargetMatchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.PreviewWorkloadPolicyTargetMatches is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetPreviewWorkloadPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewWorkloadPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewWorkloadPolicyTargetRecommendationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetPreviewWorkloadPolicyTargetRecommendations is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetWorkloadsWithAttachedPolicyTargets(context.Context, *connect.Request[v1.GetWorkloadsWithAttachedPolicyTargetsRequest]) (*connect.Response[v1.GetWorkloadsWithAttachedPolicyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetWorkloadsWithAttachedPolicyTargets is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) CreateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.CreateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.CreateNodeGroupPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.CreateNodeGroupPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetNodeGroupPolicyTarget(context.Context, *connect.Request[v1.GetNodeGroupPolicyTargetRequest]) (*connect.Response[v1.GetNodeGroupPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetNodeGroupPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ListNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ListNodeGroupPolicyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListNodeGroupPolicyTargets is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) UpdateNodeGroupPolicyTarget(context.Context, *connect.Request[v1.UpdateNodeGroupPolicyTargetRequest]) (*connect.Response[v1.UpdateNodeGroupPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.UpdateNodeGroupPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) DeleteNodeGroupPolicyTarget(context.Context, *connect.Request[v1.DeleteNodeGroupPolicyTargetRequest]) (*connect.Response[v1.DeleteNodeGroupPolicyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.DeleteNodeGroupPolicyTarget is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ToggleNodeGroupPolicyTargets(context.Context, *connect.Request[v1.ToggleNodeGroupPolicyTargetsRequest]) (*connect.Response[v1.ToggleNodeGroupPolicyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ToggleNodeGroupPolicyTargets is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) PreviewNodeGroupPolicyTargetMatches(context.Context, *connect.Request[v1.PreviewNodeGroupPolicyTargetMatchesRequest]) (*connect.Response[v1.PreviewNodeGroupPolicyTargetMatchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.PreviewNodeGroupPolicyTargetMatches is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetPreviewNodeGroupPolicyTargetRecommendations(context.Context, *connect.Request[v1.GetPreviewNodeGroupPolicyTargetRecommendationsRequest]) (*connect.Response[v1.GetPreviewNodeGroupPolicyTargetRecommendationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetPreviewNodeGroupPolicyTargetRecommendations is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) BalanceGetRecommendations(context.Context, *connect.BidiStream[v1.BalanceGetRecommendationsRequest, v1.BalanceGetRecommendationsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.BalanceGetRecommendations is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetOptimalInstanceTypeForNodeGroup(context.Context, *connect.Request[v1.GetOptimalInstanceTypeForNodeGroupRequest]) (*connect.Response[v1.GetOptimalInstanceTypeForNodeGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetOptimalInstanceTypeForNodeGroup is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.GetAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.GetAttachedNodeGroupPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetAttachedNodeGroupPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) GetAttachedWorkloadPolicies(context.Context, *connect.Request[v1.GetAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.GetAttachedWorkloadPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.GetAttachedWorkloadPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListAttachedWorkloadPolicies(context.Context, *connect.Request[v1.ListAttachedWorkloadPoliciesRequest]) (*connect.Response[v1.ListAttachedWorkloadPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListAttachedWorkloadPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ListAttachedNodeGroupPolicies(context.Context, *connect.Request[v1.ListAttachedNodeGroupPoliciesRequest]) (*connect.Response[v1.ListAttachedNodeGroupPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ListAttachedNodeGroupPolicies is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) RecommendationEvents(context.Context, *connect.Request[v1.RecommendationEventsRequest]) (*connect.Response[v1.RecommendationEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.RecommendationEvents is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) ApplyRecommendation(context.Context, *connect.Request[v1.ApplyRecommendationRequest]) (*connect.Response[v1.ApplyRecommendationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.ApplyRecommendation is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) RecommendationApplied(context.Context, *connect.Request[v1.RecommendationAppliedRequest]) (*connect.Response[v1.RecommendationAppliedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.RecommendationApplied is not implemented"))
}

func (UnimplementedK8SRecommendationServiceHandler) RetrieveSavingsForWorkload(context.Context, *connect.Request[v1.RetrieveSavingsForWorkloadRequest]) (*connect.Response[v1.RetrieveSavingsForWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sRecommendationService.RetrieveSavingsForWorkload is not implemented"))
}
